{"remainingRequest":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\perfect-scrollbar\\dist\\perfect-scrollbar.esm.js","dependencies":[{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\perfect-scrollbar\\dist\\perfect-scrollbar.esm.js","mtime":1594653276000},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594653262000},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1594653256000}],"contextDependencies":[],"result":["/*!\r\n * perfect-scrollbar v1.4.0\r\n * (c) 2018 Hyunje Jun\r\n * @license MIT\r\n */\r\nfunction get(element) {\r\n  return getComputedStyle(element);\r\n}\r\n\r\nfunction set(element, obj) {\r\n  for (var key in obj) {\r\n    var val = obj[key];\r\n    if (typeof val === 'number') {\r\n      val = val + \"px\";\r\n    }\r\n    element.style[key] = val;\r\n  }\r\n  return element;\r\n}\r\n\r\nfunction div(className) {\r\n  var div = document.createElement('div');\r\n  div.className = className;\r\n  return div;\r\n}\r\n\r\nvar elMatches =\r\n  typeof Element !== 'undefined' &&\r\n  (Element.prototype.matches ||\r\n    Element.prototype.webkitMatchesSelector ||\r\n    Element.prototype.mozMatchesSelector ||\r\n    Element.prototype.msMatchesSelector);\r\n\r\nfunction matches(element, query) {\r\n  if (!elMatches) {\r\n    throw new Error('No element matching method supported');\r\n  }\r\n\r\n  return elMatches.call(element, query);\r\n}\r\n\r\nfunction remove(element) {\r\n  if (element.remove) {\r\n    element.remove();\r\n  } else {\r\n    if (element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n    }\r\n  }\r\n}\r\n\r\nfunction queryChildren(element, selector) {\r\n  return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }\r\n  );\r\n}\r\n\r\nvar cls = {\r\n  main: 'ps',\r\n  element: {\r\n    thumb: function (x) { return (\"ps__thumb-\" + x); },\r\n    rail: function (x) { return (\"ps__rail-\" + x); },\r\n    consuming: 'ps__child--consume',\r\n  },\r\n  state: {\r\n    focus: 'ps--focus',\r\n    clicking: 'ps--clicking',\r\n    active: function (x) { return (\"ps--active-\" + x); },\r\n    scrolling: function (x) { return (\"ps--scrolling-\" + x); },\r\n  },\r\n};\r\n\r\n/*\r\n * Helper methods\r\n */\r\nvar scrollingClassTimeout = { x: null, y: null };\r\n\r\nfunction addScrollingClass(i, x) {\r\n  var classList = i.element.classList;\r\n  var className = cls.state.scrolling(x);\r\n\r\n  if (classList.contains(className)) {\r\n    clearTimeout(scrollingClassTimeout[x]);\r\n  } else {\r\n    classList.add(className);\r\n  }\r\n}\r\n\r\nfunction removeScrollingClass(i, x) {\r\n  scrollingClassTimeout[x] = setTimeout(\r\n    function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },\r\n    i.settings.scrollingThreshold\r\n  );\r\n}\r\n\r\nfunction setScrollingClassInstantly(i, x) {\r\n  addScrollingClass(i, x);\r\n  removeScrollingClass(i, x);\r\n}\r\n\r\nvar EventElement = function EventElement(element) {\r\n  this.element = element;\r\n  this.handlers = {};\r\n};\r\n\r\nvar prototypeAccessors = { isEmpty: { configurable: true } };\r\n\r\nEventElement.prototype.bind = function bind (eventName, handler) {\r\n  if (typeof this.handlers[eventName] === 'undefined') {\r\n    this.handlers[eventName] = [];\r\n  }\r\n  this.handlers[eventName].push(handler);\r\n  this.element.addEventListener(eventName, handler, false);\r\n};\r\n\r\nEventElement.prototype.unbind = function unbind (eventName, target) {\r\n    var this$1 = this;\r\n\r\n  this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {\r\n    if (target && handler !== target) {\r\n      return true;\r\n    }\r\n    this$1.element.removeEventListener(eventName, handler, false);\r\n    return false;\r\n  });\r\n};\r\n\r\nEventElement.prototype.unbindAll = function unbindAll () {\r\n    var this$1 = this;\r\n\r\n  for (var name in this$1.handlers) {\r\n    this$1.unbind(name);\r\n  }\r\n};\r\n\r\nprototypeAccessors.isEmpty.get = function () {\r\n    var this$1 = this;\r\n\r\n  return Object.keys(this.handlers).every(\r\n    function (key) { return this$1.handlers[key].length === 0; }\r\n  );\r\n};\r\n\r\nObject.defineProperties( EventElement.prototype, prototypeAccessors );\r\n\r\nvar EventManager = function EventManager() {\r\n  this.eventElements = [];\r\n};\r\n\r\nEventManager.prototype.eventElement = function eventElement (element) {\r\n  var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];\r\n  if (!ee) {\r\n    ee = new EventElement(element);\r\n    this.eventElements.push(ee);\r\n  }\r\n  return ee;\r\n};\r\n\r\nEventManager.prototype.bind = function bind (element, eventName, handler) {\r\n  this.eventElement(element).bind(eventName, handler);\r\n};\r\n\r\nEventManager.prototype.unbind = function unbind (element, eventName, handler) {\r\n  var ee = this.eventElement(element);\r\n  ee.unbind(eventName, handler);\r\n\r\n  if (ee.isEmpty) {\r\n    // remove\r\n    this.eventElements.splice(this.eventElements.indexOf(ee), 1);\r\n  }\r\n};\r\n\r\nEventManager.prototype.unbindAll = function unbindAll () {\r\n  this.eventElements.forEach(function (e) { return e.unbindAll(); });\r\n  this.eventElements = [];\r\n};\r\n\r\nEventManager.prototype.once = function once (element, eventName, handler) {\r\n  var ee = this.eventElement(element);\r\n  var onceHandler = function (evt) {\r\n    ee.unbind(eventName, onceHandler);\r\n    handler(evt);\r\n  };\r\n  ee.bind(eventName, onceHandler);\r\n};\r\n\r\nfunction createEvent(name) {\r\n  if (typeof window.CustomEvent === 'function') {\r\n    return new CustomEvent(name);\r\n  } else {\r\n    var evt = document.createEvent('CustomEvent');\r\n    evt.initCustomEvent(name, false, false, undefined);\r\n    return evt;\r\n  }\r\n}\r\n\r\nvar processScrollDiff = function(\r\n  i,\r\n  axis,\r\n  diff,\r\n  useScrollingClass,\r\n  forceFireReachEvent\r\n) {\r\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\r\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\r\n\r\n  var fields;\r\n  if (axis === 'top') {\r\n    fields = [\r\n      'contentHeight',\r\n      'containerHeight',\r\n      'scrollTop',\r\n      'y',\r\n      'up',\r\n      'down' ];\r\n  } else if (axis === 'left') {\r\n    fields = [\r\n      'contentWidth',\r\n      'containerWidth',\r\n      'scrollLeft',\r\n      'x',\r\n      'left',\r\n      'right' ];\r\n  } else {\r\n    throw new Error('A proper axis should be provided');\r\n  }\r\n\r\n  processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);\r\n};\r\n\r\nfunction processScrollDiff$1(\r\n  i,\r\n  diff,\r\n  ref,\r\n  useScrollingClass,\r\n  forceFireReachEvent\r\n) {\r\n  var contentHeight = ref[0];\r\n  var containerHeight = ref[1];\r\n  var scrollTop = ref[2];\r\n  var y = ref[3];\r\n  var up = ref[4];\r\n  var down = ref[5];\r\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\r\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\r\n\r\n  var element = i.element;\r\n\r\n  // reset reach\r\n  i.reach[y] = null;\r\n\r\n  // 1 for subpixel rounding\r\n  if (element[scrollTop] < 1) {\r\n    i.reach[y] = 'start';\r\n  }\r\n\r\n  // 1 for subpixel rounding\r\n  if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {\r\n    i.reach[y] = 'end';\r\n  }\r\n\r\n  if (diff) {\r\n    element.dispatchEvent(createEvent((\"ps-scroll-\" + y)));\r\n\r\n    if (diff < 0) {\r\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + up)));\r\n    } else if (diff > 0) {\r\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + down)));\r\n    }\r\n\r\n    if (useScrollingClass) {\r\n      setScrollingClassInstantly(i, y);\r\n    }\r\n  }\r\n\r\n  if (i.reach[y] && (diff || forceFireReachEvent)) {\r\n    element.dispatchEvent(createEvent((\"ps-\" + y + \"-reach-\" + (i.reach[y]))));\r\n  }\r\n}\r\n\r\nfunction toInt(x) {\r\n  return parseInt(x, 10) || 0;\r\n}\r\n\r\nfunction isEditable(el) {\r\n  return (\r\n    matches(el, 'input,[contenteditable]') ||\r\n    matches(el, 'select,[contenteditable]') ||\r\n    matches(el, 'textarea,[contenteditable]') ||\r\n    matches(el, 'button,[contenteditable]')\r\n  );\r\n}\r\n\r\nfunction outerWidth(element) {\r\n  var styles = get(element);\r\n  return (\r\n    toInt(styles.width) +\r\n    toInt(styles.paddingLeft) +\r\n    toInt(styles.paddingRight) +\r\n    toInt(styles.borderLeftWidth) +\r\n    toInt(styles.borderRightWidth)\r\n  );\r\n}\r\n\r\nvar env = {\r\n  isWebKit:\r\n    typeof document !== 'undefined' &&\r\n    'WebkitAppearance' in document.documentElement.style,\r\n  supportsTouch:\r\n    typeof window !== 'undefined' &&\r\n    ('ontouchstart' in window ||\r\n      (window.DocumentTouch && document instanceof window.DocumentTouch)),\r\n  supportsIePointer:\r\n    typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,\r\n  isChrome:\r\n    typeof navigator !== 'undefined' &&\r\n    /Chrome/i.test(navigator && navigator.userAgent),\r\n};\r\n\r\nvar updateGeometry = function(i) {\r\n  var element = i.element;\r\n  var roundedScrollTop = Math.floor(element.scrollTop);\r\n\r\n  i.containerWidth = element.clientWidth;\r\n  i.containerHeight = element.clientHeight;\r\n  i.contentWidth = element.scrollWidth;\r\n  i.contentHeight = element.scrollHeight;\r\n\r\n  if (!element.contains(i.scrollbarXRail)) {\r\n    // clean up and append\r\n    queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }\r\n    );\r\n    element.appendChild(i.scrollbarXRail);\r\n  }\r\n  if (!element.contains(i.scrollbarYRail)) {\r\n    // clean up and append\r\n    queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }\r\n    );\r\n    element.appendChild(i.scrollbarYRail);\r\n  }\r\n\r\n  if (\r\n    !i.settings.suppressScrollX &&\r\n    i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth\r\n  ) {\r\n    i.scrollbarXActive = true;\r\n    i.railXWidth = i.containerWidth - i.railXMarginWidth;\r\n    i.railXRatio = i.containerWidth / i.railXWidth;\r\n    i.scrollbarXWidth = getThumbSize(\r\n      i,\r\n      toInt(i.railXWidth * i.containerWidth / i.contentWidth)\r\n    );\r\n    i.scrollbarXLeft = toInt(\r\n      (i.negativeScrollAdjustment + element.scrollLeft) *\r\n        (i.railXWidth - i.scrollbarXWidth) /\r\n        (i.contentWidth - i.containerWidth)\r\n    );\r\n  } else {\r\n    i.scrollbarXActive = false;\r\n  }\r\n\r\n  if (\r\n    !i.settings.suppressScrollY &&\r\n    i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight\r\n  ) {\r\n    i.scrollbarYActive = true;\r\n    i.railYHeight = i.containerHeight - i.railYMarginHeight;\r\n    i.railYRatio = i.containerHeight / i.railYHeight;\r\n    i.scrollbarYHeight = getThumbSize(\r\n      i,\r\n      toInt(i.railYHeight * i.containerHeight / i.contentHeight)\r\n    );\r\n    i.scrollbarYTop = toInt(\r\n      roundedScrollTop *\r\n        (i.railYHeight - i.scrollbarYHeight) /\r\n        (i.contentHeight - i.containerHeight)\r\n    );\r\n  } else {\r\n    i.scrollbarYActive = false;\r\n  }\r\n\r\n  if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {\r\n    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;\r\n  }\r\n  if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {\r\n    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;\r\n  }\r\n\r\n  updateCss(element, i);\r\n\r\n  if (i.scrollbarXActive) {\r\n    element.classList.add(cls.state.active('x'));\r\n  } else {\r\n    element.classList.remove(cls.state.active('x'));\r\n    i.scrollbarXWidth = 0;\r\n    i.scrollbarXLeft = 0;\r\n    element.scrollLeft = 0;\r\n  }\r\n  if (i.scrollbarYActive) {\r\n    element.classList.add(cls.state.active('y'));\r\n  } else {\r\n    element.classList.remove(cls.state.active('y'));\r\n    i.scrollbarYHeight = 0;\r\n    i.scrollbarYTop = 0;\r\n    element.scrollTop = 0;\r\n  }\r\n};\r\n\r\nfunction getThumbSize(i, thumbSize) {\r\n  if (i.settings.minScrollbarLength) {\r\n    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);\r\n  }\r\n  if (i.settings.maxScrollbarLength) {\r\n    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);\r\n  }\r\n  return thumbSize;\r\n}\r\n\r\nfunction updateCss(element, i) {\r\n  var xRailOffset = { width: i.railXWidth };\r\n  var roundedScrollTop = Math.floor(element.scrollTop);\r\n\r\n  if (i.isRtl) {\r\n    xRailOffset.left =\r\n      i.negativeScrollAdjustment +\r\n      element.scrollLeft +\r\n      i.containerWidth -\r\n      i.contentWidth;\r\n  } else {\r\n    xRailOffset.left = element.scrollLeft;\r\n  }\r\n  if (i.isScrollbarXUsingBottom) {\r\n    xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;\r\n  } else {\r\n    xRailOffset.top = i.scrollbarXTop + roundedScrollTop;\r\n  }\r\n  set(i.scrollbarXRail, xRailOffset);\r\n\r\n  var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };\r\n  if (i.isScrollbarYUsingRight) {\r\n    if (i.isRtl) {\r\n      yRailOffset.right =\r\n        i.contentWidth -\r\n        (i.negativeScrollAdjustment + element.scrollLeft) -\r\n        i.scrollbarYRight -\r\n        i.scrollbarYOuterWidth;\r\n    } else {\r\n      yRailOffset.right = i.scrollbarYRight - element.scrollLeft;\r\n    }\r\n  } else {\r\n    if (i.isRtl) {\r\n      yRailOffset.left =\r\n        i.negativeScrollAdjustment +\r\n        element.scrollLeft +\r\n        i.containerWidth * 2 -\r\n        i.contentWidth -\r\n        i.scrollbarYLeft -\r\n        i.scrollbarYOuterWidth;\r\n    } else {\r\n      yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;\r\n    }\r\n  }\r\n  set(i.scrollbarYRail, yRailOffset);\r\n\r\n  set(i.scrollbarX, {\r\n    left: i.scrollbarXLeft,\r\n    width: i.scrollbarXWidth - i.railBorderXWidth,\r\n  });\r\n  set(i.scrollbarY, {\r\n    top: i.scrollbarYTop,\r\n    height: i.scrollbarYHeight - i.railBorderYWidth,\r\n  });\r\n}\r\n\r\nvar clickRail = function(i) {\r\n  i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });\r\n  i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {\r\n    var positionTop =\r\n      e.pageY -\r\n      window.pageYOffset -\r\n      i.scrollbarYRail.getBoundingClientRect().top;\r\n    var direction = positionTop > i.scrollbarYTop ? 1 : -1;\r\n\r\n    i.element.scrollTop += direction * i.containerHeight;\r\n    updateGeometry(i);\r\n\r\n    e.stopPropagation();\r\n  });\r\n\r\n  i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });\r\n  i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {\r\n    var positionLeft =\r\n      e.pageX -\r\n      window.pageXOffset -\r\n      i.scrollbarXRail.getBoundingClientRect().left;\r\n    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;\r\n\r\n    i.element.scrollLeft += direction * i.containerWidth;\r\n    updateGeometry(i);\r\n\r\n    e.stopPropagation();\r\n  });\r\n};\r\n\r\nvar dragThumb = function(i) {\r\n  bindMouseScrollHandler(i, [\r\n    'containerWidth',\r\n    'contentWidth',\r\n    'pageX',\r\n    'railXWidth',\r\n    'scrollbarX',\r\n    'scrollbarXWidth',\r\n    'scrollLeft',\r\n    'x',\r\n    'scrollbarXRail' ]);\r\n  bindMouseScrollHandler(i, [\r\n    'containerHeight',\r\n    'contentHeight',\r\n    'pageY',\r\n    'railYHeight',\r\n    'scrollbarY',\r\n    'scrollbarYHeight',\r\n    'scrollTop',\r\n    'y',\r\n    'scrollbarYRail' ]);\r\n};\r\n\r\nfunction bindMouseScrollHandler(\r\n  i,\r\n  ref\r\n) {\r\n  var containerHeight = ref[0];\r\n  var contentHeight = ref[1];\r\n  var pageY = ref[2];\r\n  var railYHeight = ref[3];\r\n  var scrollbarY = ref[4];\r\n  var scrollbarYHeight = ref[5];\r\n  var scrollTop = ref[6];\r\n  var y = ref[7];\r\n  var scrollbarYRail = ref[8];\r\n\r\n  var element = i.element;\r\n\r\n  var startingScrollTop = null;\r\n  var startingMousePageY = null;\r\n  var scrollBy = null;\r\n\r\n  function mouseMoveHandler(e) {\r\n    element[scrollTop] =\r\n      startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);\r\n    addScrollingClass(i, y);\r\n    updateGeometry(i);\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  function mouseUpHandler() {\r\n    removeScrollingClass(i, y);\r\n    i[scrollbarYRail].classList.remove(cls.state.clicking);\r\n    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);\r\n  }\r\n\r\n  i.event.bind(i[scrollbarY], 'mousedown', function (e) {\r\n    startingScrollTop = element[scrollTop];\r\n    startingMousePageY = e[pageY];\r\n    scrollBy =\r\n      (i[contentHeight] - i[containerHeight]) /\r\n      (i[railYHeight] - i[scrollbarYHeight]);\r\n\r\n    i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);\r\n    i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);\r\n\r\n    i[scrollbarYRail].classList.add(cls.state.clicking);\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  });\r\n}\r\n\r\nvar keyboard = function(i) {\r\n  var element = i.element;\r\n\r\n  var elementHovered = function () { return matches(element, ':hover'); };\r\n  var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };\r\n\r\n  function shouldPreventDefault(deltaX, deltaY) {\r\n    var scrollTop = Math.floor(element.scrollTop);\r\n    if (deltaX === 0) {\r\n      if (!i.scrollbarYActive) {\r\n        return false;\r\n      }\r\n      if (\r\n        (scrollTop === 0 && deltaY > 0) ||\r\n        (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)\r\n      ) {\r\n        return !i.settings.wheelPropagation;\r\n      }\r\n    }\r\n\r\n    var scrollLeft = element.scrollLeft;\r\n    if (deltaY === 0) {\r\n      if (!i.scrollbarXActive) {\r\n        return false;\r\n      }\r\n      if (\r\n        (scrollLeft === 0 && deltaX < 0) ||\r\n        (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)\r\n      ) {\r\n        return !i.settings.wheelPropagation;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  i.event.bind(i.ownerDocument, 'keydown', function (e) {\r\n    if (\r\n      (e.isDefaultPrevented && e.isDefaultPrevented()) ||\r\n      e.defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (!elementHovered() && !scrollbarFocused()) {\r\n      return;\r\n    }\r\n\r\n    var activeElement = document.activeElement\r\n      ? document.activeElement\r\n      : i.ownerDocument.activeElement;\r\n    if (activeElement) {\r\n      if (activeElement.tagName === 'IFRAME') {\r\n        activeElement = activeElement.contentDocument.activeElement;\r\n      } else {\r\n        // go deeper if element is a webcomponent\r\n        while (activeElement.shadowRoot) {\r\n          activeElement = activeElement.shadowRoot.activeElement;\r\n        }\r\n      }\r\n      if (isEditable(activeElement)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var deltaX = 0;\r\n    var deltaY = 0;\r\n\r\n    switch (e.which) {\r\n      case 37: // left\r\n        if (e.metaKey) {\r\n          deltaX = -i.contentWidth;\r\n        } else if (e.altKey) {\r\n          deltaX = -i.containerWidth;\r\n        } else {\r\n          deltaX = -30;\r\n        }\r\n        break;\r\n      case 38: // up\r\n        if (e.metaKey) {\r\n          deltaY = i.contentHeight;\r\n        } else if (e.altKey) {\r\n          deltaY = i.containerHeight;\r\n        } else {\r\n          deltaY = 30;\r\n        }\r\n        break;\r\n      case 39: // right\r\n        if (e.metaKey) {\r\n          deltaX = i.contentWidth;\r\n        } else if (e.altKey) {\r\n          deltaX = i.containerWidth;\r\n        } else {\r\n          deltaX = 30;\r\n        }\r\n        break;\r\n      case 40: // down\r\n        if (e.metaKey) {\r\n          deltaY = -i.contentHeight;\r\n        } else if (e.altKey) {\r\n          deltaY = -i.containerHeight;\r\n        } else {\r\n          deltaY = -30;\r\n        }\r\n        break;\r\n      case 32: // space bar\r\n        if (e.shiftKey) {\r\n          deltaY = i.containerHeight;\r\n        } else {\r\n          deltaY = -i.containerHeight;\r\n        }\r\n        break;\r\n      case 33: // page up\r\n        deltaY = i.containerHeight;\r\n        break;\r\n      case 34: // page down\r\n        deltaY = -i.containerHeight;\r\n        break;\r\n      case 36: // home\r\n        deltaY = i.contentHeight;\r\n        break;\r\n      case 35: // end\r\n        deltaY = -i.contentHeight;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    if (i.settings.suppressScrollX && deltaX !== 0) {\r\n      return;\r\n    }\r\n    if (i.settings.suppressScrollY && deltaY !== 0) {\r\n      return;\r\n    }\r\n\r\n    element.scrollTop -= deltaY;\r\n    element.scrollLeft += deltaX;\r\n    updateGeometry(i);\r\n\r\n    if (shouldPreventDefault(deltaX, deltaY)) {\r\n      e.preventDefault();\r\n    }\r\n  });\r\n};\r\n\r\nvar wheel = function(i) {\r\n  var element = i.element;\r\n\r\n  function shouldPreventDefault(deltaX, deltaY) {\r\n    var roundedScrollTop = Math.floor(element.scrollTop);\r\n    var isTop = element.scrollTop === 0;\r\n    var isBottom =\r\n      roundedScrollTop + element.offsetHeight === element.scrollHeight;\r\n    var isLeft = element.scrollLeft === 0;\r\n    var isRight =\r\n      element.scrollLeft + element.offsetWidth === element.scrollWidth;\r\n\r\n    var hitsBound;\r\n\r\n    // pick axis with primary direction\r\n    if (Math.abs(deltaY) > Math.abs(deltaX)) {\r\n      hitsBound = isTop || isBottom;\r\n    } else {\r\n      hitsBound = isLeft || isRight;\r\n    }\r\n\r\n    return hitsBound ? !i.settings.wheelPropagation : true;\r\n  }\r\n\r\n  function getDeltaFromEvent(e) {\r\n    var deltaX = e.deltaX;\r\n    var deltaY = -1 * e.deltaY;\r\n\r\n    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {\r\n      // OS X Safari\r\n      deltaX = -1 * e.wheelDeltaX / 6;\r\n      deltaY = e.wheelDeltaY / 6;\r\n    }\r\n\r\n    if (e.deltaMode && e.deltaMode === 1) {\r\n      // Firefox in deltaMode 1: Line scrolling\r\n      deltaX *= 10;\r\n      deltaY *= 10;\r\n    }\r\n\r\n    if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {\r\n      // IE in some mouse drivers\r\n      deltaX = 0;\r\n      deltaY = e.wheelDelta;\r\n    }\r\n\r\n    if (e.shiftKey) {\r\n      // reverse axis with shift key\r\n      return [-deltaY, -deltaX];\r\n    }\r\n    return [deltaX, deltaY];\r\n  }\r\n\r\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\r\n    // FIXME: this is a workaround for <select> issue in FF and IE #571\r\n    if (!env.isWebKit && element.querySelector('select:focus')) {\r\n      return true;\r\n    }\r\n\r\n    if (!element.contains(target)) {\r\n      return false;\r\n    }\r\n\r\n    var cursor = target;\r\n\r\n    while (cursor && cursor !== element) {\r\n      if (cursor.classList.contains(cls.element.consuming)) {\r\n        return true;\r\n      }\r\n\r\n      var style = get(cursor);\r\n      var overflow = [style.overflow, style.overflowX, style.overflowY].join(\r\n        ''\r\n      );\r\n\r\n      // if scrollable\r\n      if (overflow.match(/(scroll|auto)/)) {\r\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\r\n        if (maxScrollTop > 0) {\r\n          if (\r\n            !(cursor.scrollTop === 0 && deltaY > 0) &&\r\n            !(cursor.scrollTop === maxScrollTop && deltaY < 0)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\r\n        if (maxScrollLeft > 0) {\r\n          if (\r\n            !(cursor.scrollLeft === 0 && deltaX < 0) &&\r\n            !(cursor.scrollLeft === maxScrollLeft && deltaX > 0)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      cursor = cursor.parentNode;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function mousewheelHandler(e) {\r\n    var ref = getDeltaFromEvent(e);\r\n    var deltaX = ref[0];\r\n    var deltaY = ref[1];\r\n\r\n    if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {\r\n      return;\r\n    }\r\n\r\n    var shouldPrevent = false;\r\n    if (!i.settings.useBothWheelAxes) {\r\n      // deltaX will only be used for horizontal scrolling and deltaY will\r\n      // only be used for vertical scrolling - this is the default\r\n      element.scrollTop -= deltaY * i.settings.wheelSpeed;\r\n      element.scrollLeft += deltaX * i.settings.wheelSpeed;\r\n    } else if (i.scrollbarYActive && !i.scrollbarXActive) {\r\n      // only vertical scrollbar is active and useBothWheelAxes option is\r\n      // active, so let's scroll vertical bar using both mouse wheel axes\r\n      if (deltaY) {\r\n        element.scrollTop -= deltaY * i.settings.wheelSpeed;\r\n      } else {\r\n        element.scrollTop += deltaX * i.settings.wheelSpeed;\r\n      }\r\n      shouldPrevent = true;\r\n    } else if (i.scrollbarXActive && !i.scrollbarYActive) {\r\n      // useBothWheelAxes and only horizontal bar is active, so use both\r\n      // wheel axes for horizontal bar\r\n      if (deltaX) {\r\n        element.scrollLeft += deltaX * i.settings.wheelSpeed;\r\n      } else {\r\n        element.scrollLeft -= deltaY * i.settings.wheelSpeed;\r\n      }\r\n      shouldPrevent = true;\r\n    }\r\n\r\n    updateGeometry(i);\r\n\r\n    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);\r\n    if (shouldPrevent && !e.ctrlKey) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  if (typeof window.onwheel !== 'undefined') {\r\n    i.event.bind(element, 'wheel', mousewheelHandler);\r\n  } else if (typeof window.onmousewheel !== 'undefined') {\r\n    i.event.bind(element, 'mousewheel', mousewheelHandler);\r\n  }\r\n};\r\n\r\nvar touch = function(i) {\r\n  if (!env.supportsTouch && !env.supportsIePointer) {\r\n    return;\r\n  }\r\n\r\n  var element = i.element;\r\n\r\n  function shouldPrevent(deltaX, deltaY) {\r\n    var scrollTop = Math.floor(element.scrollTop);\r\n    var scrollLeft = element.scrollLeft;\r\n    var magnitudeX = Math.abs(deltaX);\r\n    var magnitudeY = Math.abs(deltaY);\r\n\r\n    if (magnitudeY > magnitudeX) {\r\n      // user is perhaps trying to swipe up/down the page\r\n\r\n      if (\r\n        (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||\r\n        (deltaY > 0 && scrollTop === 0)\r\n      ) {\r\n        // set prevent for mobile Chrome refresh\r\n        return window.scrollY === 0 && deltaY > 0 && env.isChrome;\r\n      }\r\n    } else if (magnitudeX > magnitudeY) {\r\n      // user is perhaps trying to swipe left/right across the page\r\n\r\n      if (\r\n        (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||\r\n        (deltaX > 0 && scrollLeft === 0)\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function applyTouchMove(differenceX, differenceY) {\r\n    element.scrollTop -= differenceY;\r\n    element.scrollLeft -= differenceX;\r\n\r\n    updateGeometry(i);\r\n  }\r\n\r\n  var startOffset = {};\r\n  var startTime = 0;\r\n  var speed = {};\r\n  var easingLoop = null;\r\n\r\n  function getTouch(e) {\r\n    if (e.targetTouches) {\r\n      return e.targetTouches[0];\r\n    } else {\r\n      // Maybe IE pointer\r\n      return e;\r\n    }\r\n  }\r\n\r\n  function shouldHandle(e) {\r\n    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {\r\n      return false;\r\n    }\r\n    if (e.targetTouches && e.targetTouches.length === 1) {\r\n      return true;\r\n    }\r\n    if (\r\n      e.pointerType &&\r\n      e.pointerType !== 'mouse' &&\r\n      e.pointerType !== e.MSPOINTER_TYPE_MOUSE\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function touchStart(e) {\r\n    if (!shouldHandle(e)) {\r\n      return;\r\n    }\r\n\r\n    var touch = getTouch(e);\r\n\r\n    startOffset.pageX = touch.pageX;\r\n    startOffset.pageY = touch.pageY;\r\n\r\n    startTime = new Date().getTime();\r\n\r\n    if (easingLoop !== null) {\r\n      clearInterval(easingLoop);\r\n    }\r\n  }\r\n\r\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\r\n    if (!element.contains(target)) {\r\n      return false;\r\n    }\r\n\r\n    var cursor = target;\r\n\r\n    while (cursor && cursor !== element) {\r\n      if (cursor.classList.contains(cls.element.consuming)) {\r\n        return true;\r\n      }\r\n\r\n      var style = get(cursor);\r\n      var overflow = [style.overflow, style.overflowX, style.overflowY].join(\r\n        ''\r\n      );\r\n\r\n      // if scrollable\r\n      if (overflow.match(/(scroll|auto)/)) {\r\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\r\n        if (maxScrollTop > 0) {\r\n          if (\r\n            !(cursor.scrollTop === 0 && deltaY > 0) &&\r\n            !(cursor.scrollTop === maxScrollTop && deltaY < 0)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        var maxScrollLeft = cursor.scrollLeft - cursor.clientWidth;\r\n        if (maxScrollLeft > 0) {\r\n          if (\r\n            !(cursor.scrollLeft === 0 && deltaX < 0) &&\r\n            !(cursor.scrollLeft === maxScrollLeft && deltaX > 0)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      cursor = cursor.parentNode;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function touchMove(e) {\r\n    if (shouldHandle(e)) {\r\n      var touch = getTouch(e);\r\n\r\n      var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };\r\n\r\n      var differenceX = currentOffset.pageX - startOffset.pageX;\r\n      var differenceY = currentOffset.pageY - startOffset.pageY;\r\n\r\n      if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {\r\n        return;\r\n      }\r\n\r\n      applyTouchMove(differenceX, differenceY);\r\n      startOffset = currentOffset;\r\n\r\n      var currentTime = new Date().getTime();\r\n\r\n      var timeGap = currentTime - startTime;\r\n      if (timeGap > 0) {\r\n        speed.x = differenceX / timeGap;\r\n        speed.y = differenceY / timeGap;\r\n        startTime = currentTime;\r\n      }\r\n\r\n      if (shouldPrevent(differenceX, differenceY)) {\r\n        e.preventDefault();\r\n      }\r\n    }\r\n  }\r\n  function touchEnd() {\r\n    if (i.settings.swipeEasing) {\r\n      clearInterval(easingLoop);\r\n      easingLoop = setInterval(function() {\r\n        if (i.isInitialized) {\r\n          clearInterval(easingLoop);\r\n          return;\r\n        }\r\n\r\n        if (!speed.x && !speed.y) {\r\n          clearInterval(easingLoop);\r\n          return;\r\n        }\r\n\r\n        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {\r\n          clearInterval(easingLoop);\r\n          return;\r\n        }\r\n\r\n        applyTouchMove(speed.x * 30, speed.y * 30);\r\n\r\n        speed.x *= 0.8;\r\n        speed.y *= 0.8;\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  if (env.supportsTouch) {\r\n    i.event.bind(element, 'touchstart', touchStart);\r\n    i.event.bind(element, 'touchmove', touchMove);\r\n    i.event.bind(element, 'touchend', touchEnd);\r\n  } else if (env.supportsIePointer) {\r\n    if (window.PointerEvent) {\r\n      i.event.bind(element, 'pointerdown', touchStart);\r\n      i.event.bind(element, 'pointermove', touchMove);\r\n      i.event.bind(element, 'pointerup', touchEnd);\r\n    } else if (window.MSPointerEvent) {\r\n      i.event.bind(element, 'MSPointerDown', touchStart);\r\n      i.event.bind(element, 'MSPointerMove', touchMove);\r\n      i.event.bind(element, 'MSPointerUp', touchEnd);\r\n    }\r\n  }\r\n};\r\n\r\nvar defaultSettings = function () { return ({\r\n  handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],\r\n  maxScrollbarLength: null,\r\n  minScrollbarLength: null,\r\n  scrollingThreshold: 1000,\r\n  scrollXMarginOffset: 0,\r\n  scrollYMarginOffset: 0,\r\n  suppressScrollX: false,\r\n  suppressScrollY: false,\r\n  swipeEasing: true,\r\n  useBothWheelAxes: false,\r\n  wheelPropagation: true,\r\n  wheelSpeed: 1,\r\n}); };\r\n\r\nvar handlers = {\r\n  'click-rail': clickRail,\r\n  'drag-thumb': dragThumb,\r\n  keyboard: keyboard,\r\n  wheel: wheel,\r\n  touch: touch,\r\n};\r\n\r\nvar PerfectScrollbar = function PerfectScrollbar(element, userSettings) {\r\n  var this$1 = this;\r\n  if ( userSettings === void 0 ) userSettings = {};\r\n\r\n  if (typeof element === 'string') {\r\n    element = document.querySelector(element);\r\n  }\r\n\r\n  if (!element || !element.nodeName) {\r\n    throw new Error('no element is specified to initialize PerfectScrollbar');\r\n  }\r\n\r\n  this.element = element;\r\n\r\n  element.classList.add(cls.main);\r\n\r\n  this.settings = defaultSettings();\r\n  for (var key in userSettings) {\r\n    this$1.settings[key] = userSettings[key];\r\n  }\r\n\r\n  this.containerWidth = null;\r\n  this.containerHeight = null;\r\n  this.contentWidth = null;\r\n  this.contentHeight = null;\r\n\r\n  var focus = function () { return element.classList.add(cls.state.focus); };\r\n  var blur = function () { return element.classList.remove(cls.state.focus); };\r\n\r\n  this.isRtl = get(element).direction === 'rtl';\r\n  this.isNegativeScroll = (function () {\r\n    var originalScrollLeft = element.scrollLeft;\r\n    var result = null;\r\n    element.scrollLeft = -1;\r\n    result = element.scrollLeft < 0;\r\n    element.scrollLeft = originalScrollLeft;\r\n    return result;\r\n  })();\r\n  this.negativeScrollAdjustment = this.isNegativeScroll\r\n    ? element.scrollWidth - element.clientWidth\r\n    : 0;\r\n  this.event = new EventManager();\r\n  this.ownerDocument = element.ownerDocument || document;\r\n\r\n  this.scrollbarXRail = div(cls.element.rail('x'));\r\n  element.appendChild(this.scrollbarXRail);\r\n  this.scrollbarX = div(cls.element.thumb('x'));\r\n  this.scrollbarXRail.appendChild(this.scrollbarX);\r\n  this.scrollbarX.setAttribute('tabindex', 0);\r\n  this.event.bind(this.scrollbarX, 'focus', focus);\r\n  this.event.bind(this.scrollbarX, 'blur', blur);\r\n  this.scrollbarXActive = null;\r\n  this.scrollbarXWidth = null;\r\n  this.scrollbarXLeft = null;\r\n  var railXStyle = get(this.scrollbarXRail);\r\n  this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);\r\n  if (isNaN(this.scrollbarXBottom)) {\r\n    this.isScrollbarXUsingBottom = false;\r\n    this.scrollbarXTop = toInt(railXStyle.top);\r\n  } else {\r\n    this.isScrollbarXUsingBottom = true;\r\n  }\r\n  this.railBorderXWidth =\r\n    toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);\r\n  // Set rail to display:block to calculate margins\r\n  set(this.scrollbarXRail, { display: 'block' });\r\n  this.railXMarginWidth =\r\n    toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);\r\n  set(this.scrollbarXRail, { display: '' });\r\n  this.railXWidth = null;\r\n  this.railXRatio = null;\r\n\r\n  this.scrollbarYRail = div(cls.element.rail('y'));\r\n  element.appendChild(this.scrollbarYRail);\r\n  this.scrollbarY = div(cls.element.thumb('y'));\r\n  this.scrollbarYRail.appendChild(this.scrollbarY);\r\n  this.scrollbarY.setAttribute('tabindex', 0);\r\n  this.event.bind(this.scrollbarY, 'focus', focus);\r\n  this.event.bind(this.scrollbarY, 'blur', blur);\r\n  this.scrollbarYActive = null;\r\n  this.scrollbarYHeight = null;\r\n  this.scrollbarYTop = null;\r\n  var railYStyle = get(this.scrollbarYRail);\r\n  this.scrollbarYRight = parseInt(railYStyle.right, 10);\r\n  if (isNaN(this.scrollbarYRight)) {\r\n    this.isScrollbarYUsingRight = false;\r\n    this.scrollbarYLeft = toInt(railYStyle.left);\r\n  } else {\r\n    this.isScrollbarYUsingRight = true;\r\n  }\r\n  this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;\r\n  this.railBorderYWidth =\r\n    toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);\r\n  set(this.scrollbarYRail, { display: 'block' });\r\n  this.railYMarginHeight =\r\n    toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);\r\n  set(this.scrollbarYRail, { display: '' });\r\n  this.railYHeight = null;\r\n  this.railYRatio = null;\r\n\r\n  this.reach = {\r\n    x:\r\n      element.scrollLeft <= 0\r\n        ? 'start'\r\n        : element.scrollLeft >= this.contentWidth - this.containerWidth\r\n          ? 'end'\r\n          : null,\r\n    y:\r\n      element.scrollTop <= 0\r\n        ? 'start'\r\n        : element.scrollTop >= this.contentHeight - this.containerHeight\r\n          ? 'end'\r\n          : null,\r\n  };\r\n\r\n  this.isAlive = true;\r\n\r\n  this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });\r\n\r\n  this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only\r\n  this.lastScrollLeft = element.scrollLeft; // for onScroll only\r\n  this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });\r\n  updateGeometry(this);\r\n};\r\n\r\nPerfectScrollbar.prototype.update = function update () {\r\n  if (!this.isAlive) {\r\n    return;\r\n  }\r\n\r\n  // Recalcuate negative scrollLeft adjustment\r\n  this.negativeScrollAdjustment = this.isNegativeScroll\r\n    ? this.element.scrollWidth - this.element.clientWidth\r\n    : 0;\r\n\r\n  // Recalculate rail margins\r\n  set(this.scrollbarXRail, { display: 'block' });\r\n  set(this.scrollbarYRail, { display: 'block' });\r\n  this.railXMarginWidth =\r\n    toInt(get(this.scrollbarXRail).marginLeft) +\r\n    toInt(get(this.scrollbarXRail).marginRight);\r\n  this.railYMarginHeight =\r\n    toInt(get(this.scrollbarYRail).marginTop) +\r\n    toInt(get(this.scrollbarYRail).marginBottom);\r\n\r\n  // Hide scrollbars not to affect scrollWidth and scrollHeight\r\n  set(this.scrollbarXRail, { display: 'none' });\r\n  set(this.scrollbarYRail, { display: 'none' });\r\n\r\n  updateGeometry(this);\r\n\r\n  processScrollDiff(this, 'top', 0, false, true);\r\n  processScrollDiff(this, 'left', 0, false, true);\r\n\r\n  set(this.scrollbarXRail, { display: '' });\r\n  set(this.scrollbarYRail, { display: '' });\r\n};\r\n\r\nPerfectScrollbar.prototype.onScroll = function onScroll (e) {\r\n  if (!this.isAlive) {\r\n    return;\r\n  }\r\n\r\n  updateGeometry(this);\r\n  processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);\r\n  processScrollDiff(\r\n    this,\r\n    'left',\r\n    this.element.scrollLeft - this.lastScrollLeft\r\n  );\r\n\r\n  this.lastScrollTop = Math.floor(this.element.scrollTop);\r\n  this.lastScrollLeft = this.element.scrollLeft;\r\n};\r\n\r\nPerfectScrollbar.prototype.destroy = function destroy () {\r\n  if (!this.isAlive) {\r\n    return;\r\n  }\r\n\r\n  this.event.unbindAll();\r\n  remove(this.scrollbarX);\r\n  remove(this.scrollbarY);\r\n  remove(this.scrollbarXRail);\r\n  remove(this.scrollbarYRail);\r\n  this.removePsClasses();\r\n\r\n  // unset elements\r\n  this.element = null;\r\n  this.scrollbarX = null;\r\n  this.scrollbarY = null;\r\n  this.scrollbarXRail = null;\r\n  this.scrollbarYRail = null;\r\n\r\n  this.isAlive = false;\r\n};\r\n\r\nPerfectScrollbar.prototype.removePsClasses = function removePsClasses () {\r\n  this.element.className = this.element.className\r\n    .split(' ')\r\n    .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })\r\n    .join(' ');\r\n};\r\n\r\nexport default PerfectScrollbar;\r\n",null]}