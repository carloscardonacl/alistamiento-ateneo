{"remainingRequest":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\ngx-treeview\\src\\treeview.component.js","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\ngx-treeview\\src\\treeview.component.js","mtime":1577367854583},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535664048428},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1535664036292}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { isNil, includes } from 'lodash';\nimport { TreeviewI18n } from './treeview-i18n';\nimport { TreeviewItem } from './treeview-item';\nimport { TreeviewConfig } from './treeview-config';\nimport { TreeviewEventParser } from './treeview-event-parser';\nimport { TreeviewHelper } from './treeview-helper';\nvar FilterTreeviewItem = /*@__PURE__*/ (function (_super) {\n    __extends(FilterTreeviewItem, _super);\n    function FilterTreeviewItem(item) {\n        var _this = _super.call(this, {\n            text: item.text,\n            value: item.value,\n            disabled: item.disabled,\n            checked: item.checked,\n            collapsed: item.collapsed,\n            children: item.children\n        }) || this;\n        _this.refItem = item;\n        return _this;\n    }\n    FilterTreeviewItem.prototype.updateRefChecked = function () {\n        this.children.forEach(function (child) {\n            if (child instanceof FilterTreeviewItem) {\n                child.updateRefChecked();\n            }\n        });\n        var refChecked = this.checked;\n        if (refChecked) {\n            for (var _i = 0, _a = this.refItem.children; _i < _a.length; _i++) {\n                var refChild = _a[_i];\n                if (!refChild.checked) {\n                    refChecked = false;\n                    break;\n                }\n            }\n        }\n        this.refItem.checked = refChecked;\n    };\n    return FilterTreeviewItem;\n}(TreeviewItem));\nvar TreeviewComponent = /*@__PURE__*/ (function () {\n    function TreeviewComponent(i18n, defaultConfig, eventParser) {\n        this.i18n = i18n;\n        this.defaultConfig = defaultConfig;\n        this.eventParser = eventParser;\n        this.selectedChange = new EventEmitter();\n        this.filterChange = new EventEmitter();\n        this.filterText = '';\n        this.config = this.defaultConfig;\n        this.allItem = new TreeviewItem({ text: 'All', value: undefined });\n        this.createHeaderTemplateContext();\n    }\n    Object.defineProperty(TreeviewComponent.prototype, \"hasFilterItems\", {\n        get: function () {\n            return !isNil(this.filterItems) && this.filterItems.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeviewComponent.prototype, \"maxHeight\", {\n        get: function () {\n            return \"\" + this.config.maxHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TreeviewComponent.prototype.ngOnChanges = function (changes) {\n        var itemsSimpleChange = changes['items'];\n        if (!isNil(itemsSimpleChange)) {\n            if (!isNil(this.items)) {\n                this.updateFilterItems();\n                this.updateCollapsedOfAll();\n                this.raiseSelectedChange();\n            }\n        }\n        this.createHeaderTemplateContext();\n    };\n    TreeviewComponent.prototype.onAllCollapseExpand = function () {\n        var _this = this;\n        this.allItem.collapsed = !this.allItem.collapsed;\n        this.filterItems.forEach(function (item) { return item.setCollapsedRecursive(_this.allItem.collapsed); });\n    };\n    TreeviewComponent.prototype.onFilterTextChange = function (text) {\n        this.filterText = text;\n        this.filterChange.emit(text);\n        this.updateFilterItems();\n    };\n    TreeviewComponent.prototype.onAllCheckedChange = function () {\n        var checked = this.allItem.checked;\n        this.filterItems.forEach(function (item) {\n            item.setCheckedRecursive(checked);\n            if (item instanceof FilterTreeviewItem) {\n                item.updateRefChecked();\n            }\n        });\n        this.raiseSelectedChange();\n    };\n    TreeviewComponent.prototype.onItemCheckedChange = function (item, checked) {\n        if (item instanceof FilterTreeviewItem) {\n            item.updateRefChecked();\n        }\n        this.updateCheckedOfAll();\n        this.raiseSelectedChange();\n    };\n    TreeviewComponent.prototype.raiseSelectedChange = function () {\n        this.generateSelection();\n        var values = this.eventParser.getSelectedChange(this);\n        this.selectedChange.emit(values);\n    };\n    TreeviewComponent.prototype.createHeaderTemplateContext = function () {\n        var _this = this;\n        this.headerTemplateContext = {\n            config: this.config,\n            item: this.allItem,\n            onCheckedChange: function () { return _this.onAllCheckedChange(); },\n            onCollapseExpand: function () { return _this.onAllCollapseExpand(); },\n            onFilterTextChange: function (text) { return _this.onFilterTextChange(text); }\n        };\n    };\n    TreeviewComponent.prototype.generateSelection = function () {\n        var checkedItems = [];\n        var uncheckedItems = [];\n        if (!isNil(this.items)) {\n            var selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n            checkedItems = selection.checked;\n            uncheckedItems = selection.unchecked;\n        }\n        this.selection = {\n            checkedItems: checkedItems,\n            uncheckedItems: uncheckedItems\n        };\n    };\n    TreeviewComponent.prototype.updateFilterItems = function () {\n        var _this = this;\n        if (this.filterText !== '') {\n            var filterItems_1 = [];\n            var filterText_1 = this.filterText.toLowerCase();\n            this.items.forEach(function (item) {\n                var newItem = _this.filterItem(item, filterText_1);\n                if (!isNil(newItem)) {\n                    filterItems_1.push(newItem);\n                }\n            });\n            this.filterItems = filterItems_1;\n        }\n        else {\n            this.filterItems = this.items;\n        }\n        this.updateCheckedOfAll();\n    };\n    TreeviewComponent.prototype.filterItem = function (item, filterText) {\n        var _this = this;\n        var isMatch = includes(item.text.toLowerCase(), filterText);\n        if (isMatch) {\n            return item;\n        }\n        else {\n            if (!isNil(item.children)) {\n                var children_1 = [];\n                item.children.forEach(function (child) {\n                    var newChild = _this.filterItem(child, filterText);\n                    if (!isNil(newChild)) {\n                        children_1.push(newChild);\n                    }\n                });\n                if (children_1.length > 0) {\n                    var newItem = new FilterTreeviewItem(item);\n                    newItem.collapsed = false;\n                    newItem.children = children_1;\n                    return newItem;\n                }\n            }\n        }\n        return undefined;\n    };\n    TreeviewComponent.prototype.updateCheckedOfAll = function () {\n        var itemChecked = null;\n        for (var _i = 0, _a = this.filterItems; _i < _a.length; _i++) {\n            var filterItem = _a[_i];\n            if (itemChecked === null) {\n                itemChecked = filterItem.checked;\n            }\n            else if (itemChecked !== filterItem.checked) {\n                itemChecked = undefined;\n                break;\n            }\n        }\n        if (itemChecked === null) {\n            itemChecked = false;\n        }\n        this.allItem.checked = itemChecked;\n    };\n    TreeviewComponent.prototype.updateCollapsedOfAll = function () {\n        var hasItemExpanded = false;\n        for (var _i = 0, _a = this.filterItems; _i < _a.length; _i++) {\n            var filterItem = _a[_i];\n            if (!filterItem.collapsed) {\n                hasItemExpanded = true;\n                break;\n            }\n        }\n        this.allItem.collapsed = !hasItemExpanded;\n    };\n    return TreeviewComponent;\n}());\nexport { TreeviewComponent };\n//# sourceMappingURL=treeview.component.js.map \n",null]}