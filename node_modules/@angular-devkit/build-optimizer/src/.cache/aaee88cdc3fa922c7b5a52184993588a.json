{"remainingRequest":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\rxjs\\_esm5\\operator\\skipWhile.js","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\rxjs\\_esm5\\operator\\skipWhile.js","mtime":1535664068747},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535664048428},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1535664036292}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_skipWhile PURE_IMPORTS_END */\r\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\r\n/**\r\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\r\n * true, but emits all further source items as soon as the condition becomes false.\r\n *\r\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\r\n *\r\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\r\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\r\n * specified predicate becomes false.\r\n * @method skipWhile\r\n * @owner Observable\r\n */\r\nexport function skipWhile(predicate) {\r\n    return higherOrder(predicate)(this);\r\n}\r\n//# sourceMappingURL=skipWhile.js.map\r\n",null]}