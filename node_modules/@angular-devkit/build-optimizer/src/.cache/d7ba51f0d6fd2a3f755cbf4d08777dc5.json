{"remainingRequest":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\ng2-archwizard\\dist\\components\\wizard.component.js","dependencies":[{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\ng2-archwizard\\dist\\components\\wizard.component.js","mtime":1594653272000},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594653262000},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1594653256000}],"contextDependencies":[],"result":["import { Component, ContentChildren, HostBinding, Input } from '@angular/core';\nimport { WizardStep } from '../util/wizard-step.interface';\nimport { WizardState } from '../navigation/wizard-state.model';\n/**\n * The `wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <wizard-step>...</wizard-step>\n *     <wizard-step>...</wizard-step>\n * </wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <wizard-step>...</wizard-step>\n *     <wizard-step>...</wizard-step>\n *     <wizard-completion-step>...</wizard-completion-step>\n * </wizard>\n * ```\n *\n * @author Marc Arndt\n */\nvar WizardComponent = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     * @param {WizardState} model The model for this wizard component\n     */\n    function WizardComponent(model) {\n        this.model = model;\n        /**\n         * The location of the navigation bar inside the wizard.\n         * This location can be either top, bottom, left or right\n         *\n         * @type {string}\n         */\n        this.navBarLocation = 'top';\n        /**\n         * The layout of the navigation bar inside the wizard.\n         * The layout can be either small, large-filled, large-empty or large-symbols\n         *\n         * @type {string}\n         */\n        this.navBarLayout = 'small';\n        /**\n         * The direction in which the steps inside the navigation bar should be shown.\n         * The direction can be either `left-to-right` or `right-to-left`\n         *\n         * @type {string}\n         */\n        this.navBarDirection = 'left-to-right';\n        /**\n         * The navigation mode used for transitioning between different steps.\n         * The navigation mode can be either `strict`, `semi-strict` or `free`\n         *\n         * @type {string}\n         */\n        this.navigationMode = 'strict';\n        /**\n         * The initially selected step, represented by its index\n         *\n         * @type {number}\n         */\n        this.defaultStepIndex = 0;\n        /**\n         * True, if the navigation bar shouldn't be used for navigating\n         *\n         * @type {boolean}\n         */\n        this.disableNavigationBar = false;\n    }\n    Object.defineProperty(WizardComponent.prototype, \"horizontalOrientation\", {\n        /**\n         * Returns true if this wizard uses a horizontal orientation.\n         * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n         *\n         * @returns {boolean} True if this wizard uses a horizontal orientation\n         */\n        get: function () {\n            return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardComponent.prototype, \"verticalOrientation\", {\n        /**\n         * Returns true if this wizard uses a vertical orientation.\n         * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n         *\n         * @returns {boolean} True if this wizard uses a vertical orientation\n         */\n        get: function () {\n            return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardComponent.prototype, \"navigation\", {\n        /**\n         * The navigation mode for this wizard\n         *\n         * @returns {NavigationMode}\n         */\n        get: function () {\n            return this.model.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialization work\n     */\n    WizardComponent.prototype.ngAfterContentInit = function () {\n        this.model.initialize(this.wizardSteps, this.navigationMode, this.defaultStepIndex, this.disableNavigationBar);\n    };\n    return WizardComponent;\n}());\nexport { WizardComponent };\n//# sourceMappingURL=wizard.component.js.map \n",null]}