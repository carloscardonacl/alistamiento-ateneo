{"remainingRequest":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\ngx-treeview\\src\\dropdown.directive.js","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\ngx-treeview\\src\\dropdown.directive.js","mtime":1577367854559},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535664048428},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1535664036292}],"contextDependencies":[],"result":["import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\nimport { isNil } from 'lodash';\nvar DropdownDirective = /*@__PURE__*/ (function () {\n    function DropdownDirective() {\n        // tslint:disable-next-line:no-input-rename\n        this.internalOpen = false;\n        this.openChange = new EventEmitter();\n    }\n    Object.defineProperty(DropdownDirective.prototype, \"isOpen\", {\n        get: function () {\n            return this.internalOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DropdownDirective.prototype.onKeyupEsc = function () {\n        this.close();\n    };\n    DropdownDirective.prototype.onDocumentClick = function (event) {\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\n            this.close();\n        }\n    };\n    DropdownDirective.prototype.open = function () {\n        if (!this.internalOpen) {\n            this.internalOpen = true;\n            this.openChange.emit(true);\n        }\n    };\n    DropdownDirective.prototype.close = function () {\n        if (this.internalOpen) {\n            this.internalOpen = false;\n            this.openChange.emit(false);\n        }\n    };\n    DropdownDirective.prototype.toggle = function () {\n        if (this.isOpen) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    DropdownDirective.prototype.isEventFromToggle = function (event) {\n        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    };\n    return DropdownDirective;\n}());\nexport { DropdownDirective };\n//# sourceMappingURL=dropdown.directive.js.map \n",null]}