{"remainingRequest":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\angular2-signaturepad\\signature-pad.js","dependencies":[{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\angular2-signaturepad\\signature-pad.js","mtime":1576545768714},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576545781437},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1576545722790}],"contextDependencies":[],"result":["'use strict';\nvar core_1 = require('@angular/core');\n;\nvar SignaturePad = /*@__PURE__*/ (function () {\n    function SignaturePad(elementRef) {\n        // no op\n        this.elementRef = elementRef;\n        this.options = this.options || {};\n        this.onBeginEvent = new core_1.EventEmitter();\n        this.onEndEvent = new core_1.EventEmitter();\n    }\n    SignaturePad.prototype.ngAfterContentInit = function () {\n        var sp = require('signature_pad')['default'];\n        var canvas = this.elementRef.nativeElement.querySelector('canvas');\n        if (this.options['canvasHeight']) {\n            canvas.height = this.options['canvasHeight'];\n        }\n        if (this.options['canvasWidth']) {\n            canvas.width = this.options['canvasWidth'];\n        }\n        this.signaturePad = new sp(canvas, this.options);\n        this.signaturePad.onBegin = this.onBegin.bind(this);\n        this.signaturePad.onEnd = this.onEnd.bind(this);\n    };\n    SignaturePad.prototype.resizeCanvas = function () {\n        // When zoomed out to less than 100%, for some very strange reason,\n        // some browsers report devicePixelRatio as less than 1\n        // and only part of the canvas is cleared then.\n        var ratio = Math.max(window.devicePixelRatio || 1, 1);\n        var canvas = this.signaturePad._canvas;\n        canvas.width = canvas.offsetWidth * ratio;\n        canvas.height = canvas.offsetHeight * ratio;\n        canvas.getContext('2d').scale(ratio, ratio);\n        this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value\n    };\n    // Returns signature image as an array of point groups\n    SignaturePad.prototype.toData = function () {\n        return this.signaturePad.toData();\n    };\n    // Draws signature image from an array of point groups\n    SignaturePad.prototype.fromData = function (points) {\n        this.signaturePad.fromData(points);\n    };\n    // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)\n    SignaturePad.prototype.toDataURL = function (imageType, quality) {\n        return this.signaturePad.toDataURL(imageType, quality); // save image as data URL\n    };\n    // Draws signature image from data URL\n    SignaturePad.prototype.fromDataURL = function (dataURL, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.signaturePad.fromDataURL(dataURL, options);\n    };\n    // Clears the canvas\n    SignaturePad.prototype.clear = function () {\n        this.signaturePad.clear();\n    };\n    // Returns true if canvas is empty, otherwise returns false\n    SignaturePad.prototype.isEmpty = function () {\n        return this.signaturePad.isEmpty();\n    };\n    // Unbinds all event handlers\n    SignaturePad.prototype.off = function () {\n        this.signaturePad.off();\n    };\n    // Rebinds all event handlers\n    SignaturePad.prototype.on = function () {\n        this.signaturePad.on();\n    };\n    // set an option on the signaturePad - e.g. set('minWidth', 50);\n    SignaturePad.prototype.set = function (option, value) {\n        switch (option) {\n            case 'canvasHeight':\n                this.signaturePad._canvas.height = value;\n                break;\n            case 'canvasWidth':\n                this.signaturePad._canvas.width = value;\n                break;\n            default:\n                this.signaturePad[option] = value;\n        }\n    };\n    // notify subscribers on signature begin\n    SignaturePad.prototype.onBegin = function () {\n        this.onBeginEvent.emit(true);\n    };\n    // notify subscribers on signature end\n    SignaturePad.prototype.onEnd = function () {\n        this.onEndEvent.emit(true);\n    };\n    SignaturePad.decorators = [\n        { type: core_1.Component, args: [{\n                    template: '<canvas></canvas>',\n                    selector: 'signature-pad',\n                },] },\n    ];\n    /** @nocollapse */\n    SignaturePad.ctorParameters = [\n        { type: core_1.ElementRef, },\n    ];\n    SignaturePad.propDecorators = {\n        'options': [{ type: core_1.Input },],\n        'onBeginEvent': [{ type: core_1.Output },],\n        'onEndEvent': [{ type: core_1.Output },],\n    };\n    return SignaturePad;\n}());\nexports.SignaturePad = SignaturePad;\n",null]}