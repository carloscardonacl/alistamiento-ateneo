{"remainingRequest":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\ng-fullcalendar\\ng-fullcalendar.es5.js","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\ng-fullcalendar\\ng-fullcalendar.es5.js","mtime":1535664060865},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535664048428},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1535664036292}],"contextDependencies":[],"result":["import { Component, ElementRef, EventEmitter, Input, NgModule, NgZone, Output } from '@angular/core';\nimport $ from 'jquery';\nimport fullcalendar from 'fullcalendar';\n$.fn.fullCalendar = function (options) {\n    var args = Array.prototype.slice.call(arguments, 1); // for a possible method call\n    var res = this; // what this function will return (this jQuery object by default)\n    this.each(function (i, _element) {\n        var element = $(_element);\n        var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)\n        var singleRes; // the returned value of this single method call\n        // a method call\n        if (typeof options === 'string') {\n            if (options === 'getCalendar') {\n                if (!i) {\n                    res = calendar;\n                }\n            }\n            else if (options === 'destroy') {\n                if (calendar) {\n                    calendar.destroy();\n                    element.removeData('fullCalendar');\n                }\n            }\n            else if (!calendar) {\n                FC.warn(\"Attempting to call a FullCalendar method on an element with no calendar.\");\n            }\n            else if ($.isFunction(calendar[options])) {\n                singleRes = calendar[options].apply(calendar, args);\n                if (!i) {\n                    res = singleRes; // record the first method call result\n                }\n                if (options === 'destroy') {\n                    element.removeData('fullCalendar');\n                }\n            }\n            else {\n                FC.warn(\"'\" + options + \"' is an unknown FullCalendar method.\");\n            }\n        }\n        else if (!calendar) {\n            calendar = new fullcalendar.Calendar(element, options);\n            element.data('fullCalendar', calendar);\n            calendar.render();\n        }\n    });\n    return res;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n(function () {\n    /**\n     * @param {?} event\n     * @param {?} params\n     * @return {?}\n     */\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var /** @type {?} */ evt = (document.createEvent('CustomEvent'));\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n    CustomEvent.prototype = Event.prototype;\n    window.CustomEvent = /** @type {?} */ (CustomEvent);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CalendarComponent = /*@__PURE__*/ (function () {\n    function CalendarComponent(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this._reRender = true;\n        // Notify when things change\n        this.eventsModelChange = new EventEmitter();\n        // Various events\n        this.eventDrop = new EventEmitter();\n        this.eventResize = new EventEmitter();\n        this.eventResizeStart = new EventEmitter();\n        this.eventResizeStop = new EventEmitter();\n        this.eventClick = new EventEmitter();\n        this.clickButton = new EventEmitter();\n        this.windowResize = new EventEmitter();\n        this.viewRender = new EventEmitter();\n        this.eventAfterRender = new EventEmitter();\n        this.eventAfterAllRender = new EventEmitter();\n        this.viewDestroy = new EventEmitter();\n        this.eventRender = new EventEmitter();\n        this.eventDestroy = new EventEmitter();\n        this.eventMouseOver = new EventEmitter();\n        this.eventMouseOut = new EventEmitter();\n        this.initialized = new EventEmitter();\n        this.select = new EventEmitter();\n        this.unselect = new EventEmitter();\n        this.dayClick = new EventEmitter();\n        this.navLinkDayClick = new EventEmitter();\n        this.navLinkWeekClick = new EventEmitter();\n        this.eventDragStart = new EventEmitter();\n        this.eventDragStop = new EventEmitter();\n        this.drop = new EventEmitter();\n        this.eventReceive = new EventEmitter();\n        this.dayRender = new EventEmitter();\n        this.resourceRender = new EventEmitter();\n    }\n    Object.defineProperty(CalendarComponent.prototype, \"eventsModel\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._eventsModel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _this = this;\n            this._eventsModel = value;\n            if (this._reRender) {\n                setTimeout(function () {\n                    _this.renderEvents(value);\n                }, 50);\n            }\n            else {\n                this._reRender = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CalendarComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    CalendarComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () {\n                _this.updaterOptions();\n                _this.zone.runOutsideAngular(function () {\n                    $(_this.element.nativeElement).fullCalendar(_this.options);\n                    _this._eventsModel = _this.options.events;\n                    _this.eventsModelChange.next(_this.options.events);\n                    _this.initialized.emit(true);\n                    // Click listeners\n                    var /** @type {?} */ elem = document.getElementsByTagName('ng-fullcalendar');\n                    $('[class ^=\"fc\"][class *=\"button\"]').click(function (el) {\n                        var /** @type {?} */ classnames = el.currentTarget.className.split(' ');\n                        classnames.forEach(function (name) {\n                            if (name.indexOf('button') == name.length - 6) {\n                                name = name.replace(/fc|button|-/g, '');\n                                if (name != '') {\n                                    // this.renderEvents(this._eventsModel);\n                                    eventDispatch(name);\n                                }\n                            }\n                        });\n                    });\n                    /**\n                     * @param {?} buttonType\n                     * @return {?}\n                     */\n                    function eventDispatch(buttonType) {\n                        var /** @type {?} */ data = $('ng-fullcalendar').fullCalendar('getDate');\n                        var /** @type {?} */ currentDetail = {\n                            buttonType: buttonType,\n                            data: data\n                        };\n                        var /** @type {?} */ widgetEvent = new CustomEvent('clickButton', {\n                            bubbles: true,\n                            detail: currentDetail\n                        });\n                        for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                            elem[i].dispatchEvent(widgetEvent);\n                        }\n                    }\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    CalendarComponent.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    CalendarComponent.prototype.ngAfterViewChecked = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    CalendarComponent.prototype.updateEventsBeforeResize = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ events = this.fullCalendar('clientEvents');\n            this._reRender = false;\n            this.eventsModel = events;\n            this.eventsModelChange.next(events);\n        };\n    /**\n     * @return {?}\n     */\n    CalendarComponent.prototype.updaterOptions = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ elem = document.getElementsByTagName('ng-fullcalendar');\n            this.options.eventDrop = function (event, duration) {\n                var /** @type {?} */ detail = { event: event, duration: duration };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventDrop', {\n                    bubbles: true,\n                    detail: detail\n                });\n                _this.updateEventsBeforeResize();\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.eventResize = function (event, duration) {\n                var /** @type {?} */ detail = { event: event, duration: duration };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventResize', {\n                    bubbles: true,\n                    detail: detail\n                });\n                _this.updateEventsBeforeResize();\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.eventResizeStart = function (event, jsEvent, ui, view) {\n                var /** @type {?} */ detail = {\n                    event: event, jsEvent: jsEvent, ui: ui, view: view\n                };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventResizeStart', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventResizeStop = function (event, jsEvent, ui, view) {\n                var /** @type {?} */ detail = {\n                    event: event, jsEvent: jsEvent, ui: ui, view: view\n                };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventResizeStop', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventRender = function (event, element, view) {\n                var /** @type {?} */ detail = { event: event, element: element, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventRender', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.eventDestroy = function (event, element, view) {\n                var /** @type {?} */ detail = { event: event, element: element, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventDestroy', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventAfterRender = function (event, element, view) {\n                var /** @type {?} */ detail = { event: event, element: element, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventAfterRender', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventClick = function (event) {\n                var /** @type {?} */ detail = { event: event, duration: null };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventClick', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.windowResize = function (view) {\n                var /** @type {?} */ detail = { view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('windowResize', {\n                    bubbles: true,\n                    detail: detail\n                });\n                if (elem && elem[0]) {\n                    for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                        elem[i].dispatchEvent(widgetEvent);\n                    }\n                }\n            };\n            this.options.viewRender = function (view, element) {\n                var /** @type {?} */ detail = { view: view, element: element };\n                var /** @type {?} */ widgetEvent = new CustomEvent('viewRender', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.viewDestroy = function (view, element) {\n                var /** @type {?} */ detail = { view: view, element: element };\n                var /** @type {?} */ widgetEvent = new CustomEvent('viewDestroy', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.select = function (start, end, jsEvent, view, resource) {\n                var /** @type {?} */ detail = { start: start, end: end, jsEvent: jsEvent, view: view, resource: resource };\n                var /** @type {?} */ widgetEvent = new CustomEvent('select', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.unselect = function (view, jsEvent) {\n                var /** @type {?} */ detail = { view: view, jsEvent: jsEvent };\n                var /** @type {?} */ widgetEvent = new CustomEvent('unselect', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.dayClick = function (date, jsEvent, view) {\n                var /** @type {?} */ detail = { date: date, jsEvent: jsEvent, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('dayClick', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.navLinkDayClick = function (date, jsEvent) {\n                var /** @type {?} */ detail = { date: date, jsEvent: jsEvent };\n                var /** @type {?} */ widgetEvent = new CustomEvent('navLinkDayClick', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.navLinkWeekClick = function (weekStart, jsEvent) {\n                var /** @type {?} */ detail = { weekStart: weekStart, jsEvent: jsEvent };\n                var /** @type {?} */ widgetEvent = new CustomEvent('navLinkWeekClick', {\n                    bubbles: true,\n                    detail: detail\n                });\n                for (var /** @type {?} */ i = 0; i < elem.length; i++) {\n                    elem[i].dispatchEvent(widgetEvent);\n                }\n            };\n            this.options.eventDragStart = function (event, jsEvent, ui, view) {\n                var /** @type {?} */ detail = { event: event, jsEvent: jsEvent, ui: ui, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventDragStart', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventDragStop = function (event, jsEvent, ui, view) {\n                var /** @type {?} */ detail = { event: event, jsEvent: jsEvent, ui: ui, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventDragStop', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventMouseover = function (event, jsEvent, view) {\n                var /** @type {?} */ detail = { event: event, jsEvent: jsEvent, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventMouseover', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventMouseout = function (event, jsEvent, view) {\n                var /** @type {?} */ detail = { event: event, jsEvent: jsEvent, view: view };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventMouseout', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.drop = function (date, jsEvent, ui, resourceId) {\n                var /** @type {?} */ detail = { date: date, jsEvent: jsEvent, ui: ui, resourceId: resourceId };\n                var /** @type {?} */ widgetEvent = new CustomEvent('drop', {\n                    bubbles: true,\n                    detail: detail\n                });\n                // probably need to add an event - not handled!\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.eventReceive = function (event) {\n                var /** @type {?} */ detail = { event: event };\n                var /** @type {?} */ widgetEvent = new CustomEvent('eventReceive', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.dayRender = function (date, cell) {\n                var /** @type {?} */ detail = { date: date, cell: cell };\n                var /** @type {?} */ widgetEvent = new CustomEvent('dayRender', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n            this.options.resourceRender = function (resourceObj, labelTds, bodyTds) {\n                var /** @type {?} */ detail = { resourceObj: resourceObj, labelTds: labelTds, bodyTds: bodyTds };\n                var /** @type {?} */ widgetEvent = new CustomEvent('resourceRender', {\n                    bubbles: true,\n                    detail: detail\n                });\n                elem[0].dispatchEvent(widgetEvent);\n            };\n        };\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    CalendarComponent.prototype.fullCalendar = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (!args) {\n                return;\n            }\n            switch (args.length) {\n                case 0:\n                    return;\n                case 1:\n                    return $(this.element.nativeElement).fullCalendar(args[0]);\n                case 2:\n                    return $(this.element.nativeElement).fullCalendar(args[0], args[1]);\n                case 3:\n                    return $(this.element.nativeElement).fullCalendar(args[0], args[1], args[2]);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CalendarComponent.prototype.updateEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            return $(this.element.nativeElement).fullCalendar('updateEvent', event);\n        };\n    /**\n     * @param {?} idOrFilter\n     * @return {?}\n     */\n    CalendarComponent.prototype.clientEvents = /**\n     * @param {?} idOrFilter\n     * @return {?}\n     */\n        function (idOrFilter) {\n            return $(this.element.nativeElement).fullCalendar('clientEvents', idOrFilter);\n        };\n    /**\n     * @param {?} events\n     * @return {?}\n     */\n    CalendarComponent.prototype.renderEvents = /**\n     * @param {?} events\n     * @return {?}\n     */\n        function (events) {\n            $(this.element.nativeElement).fullCalendar('removeEvents');\n            if (events && events.length > 0) {\n                $(this.element.nativeElement).fullCalendar('renderEvents', events, true);\n                $(this.element.nativeElement).fullCalendar('rerenderEvents');\n            }\n        };\n    return CalendarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar FullCalendarModule = /*@__PURE__*/ (function () {\n    function FullCalendarModule() {\n    }\n    return FullCalendarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ButtonClickModel = /*@__PURE__*/ (function () {\n    function ButtonClickModel() {\n    }\n    return ButtonClickModel;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar UpdateEventModel = /*@__PURE__*/ (function () {\n    function UpdateEventModel() {\n    }\n    return UpdateEventModel;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { FullCalendarModule, CalendarComponent, ButtonClickModel, UpdateEventModel };\n//# sourceMappingURL=ng-fullcalendar.es5.js.map\n",null]}