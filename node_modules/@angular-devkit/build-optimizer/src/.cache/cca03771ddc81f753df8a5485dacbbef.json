{"remainingRequest":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\angular-user-idle\\user-idle.umd.js","dependencies":[{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\angular-user-idle\\user-idle.umd.js","mtime":1591018626368},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584367093869},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584367088163}],"contextDependencies":[],"result":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :\n        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs'], factory) :\n            (factory((global['user-idle'] = {}), global._angular_core, global.rxjs));\n}(this, (function (exports, core, rxjs) {\n    'use strict';\n    var UserIdleServiceConfig = (function () {\n        function UserIdleServiceConfig() {\n        }\n        return UserIdleServiceConfig;\n    }());\n    /**\n     * User's idle service.\n     */\n    var UserIdleService = (function () {\n        function UserIdleService(config) {\n            this.timerStart$ = new rxjs.Subject();\n            this.timeout$ = new rxjs.Subject();\n            /**\n               * Idle value in seconds.\n               * Default equals to 10 minutes.\n               */\n            this.idle = 600;\n            /**\n               * Timeout value in seconds.\n               * Default equals to 5 minutes.\n               */\n            this.timeout = 300;\n            /**\n               * Ping value in seconds.\n               */\n            this.ping = 120;\n            if (config) {\n                this.idle = config.idle;\n                this.timeout = config.timeout;\n                this.ping = config.ping;\n            }\n            this.activityEvents$ = rxjs.Observable.merge(rxjs.Observable.fromEvent(window, 'mousemove'), rxjs.Observable.fromEvent(window, 'resize'), rxjs.Observable.fromEvent(document, 'keydown'));\n            this.idle$ = rxjs.Observable.from(this.activityEvents$);\n        }\n        /**\n         * Start watching for user idle and setup timer and ping.\n         */\n        /**\n           * Start watching for user idle and setup timer and ping.\n           */\n        UserIdleService.prototype.startWatching = /**\n           * Start watching for user idle and setup timer and ping.\n           */\n            function () {\n                var _this = this;\n                /**\n                     * If any of user events is not active for idle-seconds when start timer.\n                     */\n                this.idleSubscription = this.idle$\n                    .bufferTime(5000) // Starting point of detecting of user's inactivity\n                    .filter(function (arr) { return !arr.length && !_this.isInactivityTimer; })\n                    .switchMap(function () {\n                    _this.isInactivityTimer = true;\n                    return rxjs.Observable.interval(1000)\n                        .takeUntil(rxjs.Observable.merge(_this.activityEvents$, rxjs.Observable.timer(_this.idle * 1000)\n                        .do(function () { return _this.timerStart$.next(true); })))\n                        .finally(function () { return _this.isInactivityTimer = false; });\n                })\n                    .subscribe();\n                this.setupTimer(this.timeout);\n                this.setupPing(this.ping);\n            };\n        UserIdleService.prototype.stopWatching = function () {\n            this.stopTimer();\n            if (this.idleSubscription) {\n                this.idleSubscription.unsubscribe();\n            }\n        };\n        UserIdleService.prototype.stopTimer = function () {\n            this.timerStart$.next(false);\n        };\n        UserIdleService.prototype.resetTimer = function () {\n            this.stopTimer();\n            this.isTimeout = false;\n        };\n        /**\n         * Return observable for timer's countdown number that emits after idle.\n         * @return {Observable<number>}\n         */\n        /**\n           * Return observable for timer's countdown number that emits after idle.\n           * @return {Observable<number>}\n           */\n        UserIdleService.prototype.onTimerStart = /**\n           * Return observable for timer's countdown number that emits after idle.\n           * @return {Observable<number>}\n           */\n            function () {\n                var _this = this;\n                return this.timerStart$\n                    .distinctUntilChanged()\n                    .switchMap(function (start) { return start ? _this.timer$ : rxjs.Observable.of(null); });\n            };\n        /**\n         * Return observable for timeout is fired.\n         * @return {Observable<boolean>}\n         */\n        /**\n           * Return observable for timeout is fired.\n           * @return {Observable<boolean>}\n           */\n        UserIdleService.prototype.onTimeout = /**\n           * Return observable for timeout is fired.\n           * @return {Observable<boolean>}\n           */\n            function () {\n                var _this = this;\n                return this.timeout$\n                    .filter(function (timeout) { return !!timeout; })\n                    .map(function () {\n                    _this.isTimeout = true;\n                    return true;\n                });\n            };\n        UserIdleService.prototype.getConfigValue = function () {\n            return {\n                idle: this.idle,\n                timeout: this.timeout,\n                ping: this.ping\n            };\n        };\n        /**\n         * Setup timer.\n         *\n         * Counts every seconds and return n+1 and fire timeout for last count.\n         * @param timeout Timeout in seconds.\n         */\n        /**\n           * Setup timer.\n           *\n           * Counts every seconds and return n+1 and fire timeout for last count.\n           * @param timeout Timeout in seconds.\n           */\n        UserIdleService.prototype.setupTimer = /**\n           * Setup timer.\n           *\n           * Counts every seconds and return n+1 and fire timeout for last count.\n           * @param timeout Timeout in seconds.\n           */\n            function (timeout) {\n                var _this = this;\n                this.timer$ = rxjs.Observable.interval(1000)\n                    .take(timeout)\n                    .map(function () { return 1; })\n                    .scan(function (acc, n) { return acc + n; })\n                    .map(function (count) {\n                    if (count === timeout) {\n                        _this.timeout$.next(true);\n                    }\n                    return count;\n                });\n            };\n        /**\n         * Setup ping.\n         *\n         * Pings every ping-seconds only if is not timeout.\n         * @param {number} ping\n         */\n        /**\n           * Setup ping.\n           *\n           * Pings every ping-seconds only if is not timeout.\n           * @param {number} ping\n           */\n        UserIdleService.prototype.setupPing = /**\n           * Setup ping.\n           *\n           * Pings every ping-seconds only if is not timeout.\n           * @param {number} ping\n           */\n            function (ping) {\n                var _this = this;\n                this.ping$ = rxjs.Observable.interval(ping * 1000).filter(function () { return !_this.isTimeout; });\n            };\n        UserIdleService.decorators = [\n            { type: core.Injectable },\n        ];\n        /** @nocollapse */\n        UserIdleService.ctorParameters = function () {\n            return [\n                { type: UserIdleServiceConfig, decorators: [{ type: core.Optional },] },\n            ];\n        };\n        return UserIdleService;\n    }());\n    /**\n     * User's idle module.\n     */\n    var UserIdleModule = (function () {\n        function UserIdleModule() {\n        }\n        UserIdleModule.forRoot = function (config) {\n            return {\n                ngModule: UserIdleModule,\n                providers: [\n                    { provide: UserIdleServiceConfig, useValue: config }\n                ]\n            };\n        };\n        UserIdleModule.decorators = [\n            { type: core.NgModule, args: [{\n                        providers: [UserIdleService]\n                    },] },\n        ];\n        /** @nocollapse */\n        UserIdleModule.ctorParameters = function () { return []; };\n        return UserIdleModule;\n    }());\n    exports.UserIdleModule = UserIdleModule;\n    exports.UserIdleService = UserIdleService;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n",null]}