{"remainingRequest":"D:\\SIGESPRO\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SIGESPRO\\sigespro\\node_modules\\ng2-archwizard\\dist\\directives\\next-step.directive.js","dependencies":[{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\ng2-archwizard\\dist\\directives\\next-step.directive.js","mtime":1582660892126},{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582660885942},{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1582660881929}],"contextDependencies":[],"result":["import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\nimport { WizardState } from '../navigation/wizard-state.model';\n/**\n * The `nextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button nextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nvar NextStepDirective = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     *\n     * @param wizardState The state of the wizard\n     */\n    function NextStepDirective(wizardState) {\n        this.wizardState = wizardState;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         *\n         * @type {EventEmitter}\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         *\n         * @type {EventEmitter}\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    Object.defineProperty(NextStepDirective.prototype, \"finalize\", {\n        /**\n         * A convenience field for `preFinalize`\n         */\n        get: function () {\n            return this.preFinalize;\n        },\n        /**\n         * A convenience name for `preFinalize`\n         *\n         * @param {EventEmitter<void>} emitter The [[EventEmitter]] to be set\n         */\n        set: function (emitter) {\n            /* istanbul ignore next */\n            this.preFinalize = emitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NextStepDirective.prototype, \"navigationMode\", {\n        /**\n         * The navigation mode\n         *\n         * @returns {NavigationMode}\n         */\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    NextStepDirective.prototype.onClick = function () {\n        this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n    };\n    return NextStepDirective;\n}());\nexport { NextStepDirective };\n//# sourceMappingURL=next-step.directive.js.map \n",null]}