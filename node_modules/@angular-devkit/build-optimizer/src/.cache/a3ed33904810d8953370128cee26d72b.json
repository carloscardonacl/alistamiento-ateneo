{"remainingRequest":"D:\\SIGESPRO\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SIGESPRO\\sigespro\\node_modules\\mydaterangepicker\\dist\\services\\my-date-range-picker.date.range.util.service.js","dependencies":[{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\mydaterangepicker\\dist\\services\\my-date-range-picker.date.range.util.service.js","mtime":1582660891689},{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582660885942},{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1582660881929}],"contextDependencies":[],"result":["import { Injectable } from \"@angular/core\";\nexport var DateRangeUtilService = /*@__PURE__*/ (function () {\n    function DateRangeUtilService() {\n    }\n    DateRangeUtilService.prototype.isDateRangeValid = function (daterange, dateFormat, minYear, maxYear, disableUntil, disableSince, disableDates, disableDateRanges, enableDates, monthLabels) {\n        var invalidDateRange = {\n            beginDate: { day: 0, month: 0, year: 0 },\n            endDate: { day: 0, month: 0, year: 0 }\n        };\n        var isMonthStr = dateFormat.indexOf(\"mmm\") !== -1;\n        if (daterange.length !== 23 && !isMonthStr || daterange.length !== 25 && isMonthStr) {\n            return invalidDateRange;\n        }\n        var dates = daterange.split(\" - \");\n        if (dates.length !== 2) {\n            return invalidDateRange;\n        }\n        var validDates = [];\n        for (var i in dates) {\n            var date = this.isDateValid(dates[i], dateFormat, minYear, maxYear, monthLabels, isMonthStr);\n            if (date.day === 0 && date.month === 0 && date.year === 0) {\n                return invalidDateRange;\n            }\n            if (this.isDisabledDay(date, minYear, maxYear, disableUntil, disableSince, disableDates, disableDateRanges, enableDates)) {\n                return invalidDateRange;\n            }\n            validDates.push(date);\n        }\n        if (this.getTimeInMilliseconds(validDates[1]) < this.getTimeInMilliseconds(validDates[0])) {\n            return invalidDateRange;\n        }\n        return {\n            beginDate: { day: validDates[0].day, month: validDates[0].month, year: validDates[0].year },\n            endDate: { day: validDates[1].day, month: validDates[1].month, year: validDates[1].year }\n        };\n    };\n    DateRangeUtilService.prototype.isMonthLabelValid = function (monthLabel, monthLabels) {\n        for (var key = 1; key <= 12; key++) {\n            if (monthLabel.toLowerCase() === monthLabels[key].toLowerCase()) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    DateRangeUtilService.prototype.isYearLabelValid = function (yearLabel, minYear, maxYear) {\n        if (yearLabel >= minYear && yearLabel <= maxYear) {\n            return yearLabel;\n        }\n        return -1;\n    };\n    DateRangeUtilService.prototype.parseDatePartNumber = function (dateFormat, dateString, datePart) {\n        var pos = dateFormat.indexOf(datePart);\n        if (pos !== -1) {\n            var value = dateString.substring(pos, pos + datePart.length);\n            if (!/^\\d+$/.test(value)) {\n                return -1;\n            }\n            return parseInt(value);\n        }\n        return -1;\n    };\n    DateRangeUtilService.prototype.parseDatePartMonthName = function (dateFormat, dateString, datePart, monthLabels) {\n        var pos = dateFormat.indexOf(datePart);\n        if (pos !== -1) {\n            return this.isMonthLabelValid(dateString.substring(pos, pos + datePart.length), monthLabels);\n        }\n        return -1;\n    };\n    DateRangeUtilService.prototype.parseDefaultMonth = function (monthString) {\n        var month = { monthTxt: \"\", monthNbr: 0, year: 0 };\n        if (monthString !== \"\") {\n            var split = monthString.split(monthString.match(/[^0-9]/)[0]);\n            month.monthNbr = split[0].length === 2 ? parseInt(split[0]) : parseInt(split[1]);\n            month.year = split[0].length === 2 ? parseInt(split[1]) : parseInt(split[0]);\n        }\n        return month;\n    };\n    DateRangeUtilService.prototype.isDisabledDay = function (date, minYear, maxYear, disableUntil, disableSince, disableDates, disableDateRanges, enableDates) {\n        var dateMs = this.getTimeInMilliseconds(date);\n        for (var _i = 0, enableDates_1 = enableDates; _i < enableDates_1.length; _i++) {\n            var d = enableDates_1[_i];\n            if (d.year === date.year && d.month === date.month && d.day === date.day) {\n                return false;\n            }\n        }\n        if (date.year < minYear && date.month === 12 || date.year > maxYear && date.month === 1) {\n            return true;\n        }\n        if (this.isInitializedDate(disableUntil) && dateMs <= this.getTimeInMilliseconds(disableUntil)) {\n            return true;\n        }\n        if (this.isInitializedDate(disableSince) && dateMs >= this.getTimeInMilliseconds(disableSince)) {\n            return true;\n        }\n        for (var _a = 0, disableDates_1 = disableDates; _a < disableDates_1.length; _a++) {\n            var d = disableDates_1[_a];\n            if (d.year === date.year && d.month === date.month && d.day === date.day) {\n                return true;\n            }\n        }\n        for (var _b = 0, disableDateRanges_1 = disableDateRanges; _b < disableDateRanges_1.length; _b++) {\n            var d = disableDateRanges_1[_b];\n            if (this.isInitializedDate(d.beginDate) && this.isInitializedDate(d.endDate) && dateMs >= this.getTimeInMilliseconds(d.beginDate) && dateMs <= this.getTimeInMilliseconds(d.endDate)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    DateRangeUtilService.prototype.isMonthDisabledByDisableUntil = function (date, disableUntil) {\n        return this.isInitializedDate(disableUntil) && this.getTimeInMilliseconds(date) <= this.getTimeInMilliseconds(disableUntil);\n    };\n    DateRangeUtilService.prototype.isMonthDisabledByDisableSince = function (date, disableSince) {\n        return this.isInitializedDate(disableSince) && this.getTimeInMilliseconds(date) >= this.getTimeInMilliseconds(disableSince);\n    };\n    DateRangeUtilService.prototype.isInitializedDate = function (date) {\n        return date.year !== 0 && date.month !== 0 && date.day !== 0;\n    };\n    DateRangeUtilService.prototype.getTimeInMilliseconds = function (date) {\n        return new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0).getTime();\n    };\n    DateRangeUtilService.prototype.getWeekNumber = function (date) {\n        var d = new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);\n        d.setDate(d.getDate() + (d.getDay() === 0 ? -3 : 4 - d.getDay()));\n        return Math.round(((d.getTime() - new Date(d.getFullYear(), 0, 4).getTime()) / 86400000) / 7) + 1;\n    };\n    DateRangeUtilService.prototype.isDateValid = function (date, dateFormat, minYear, maxYear, monthLabels, isMonthStr) {\n        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n        var invalidDate = { day: 0, month: 0, year: 0 };\n        if (date.length !== 10 && !isMonthStr || date.length !== 11 && isMonthStr) {\n            return invalidDate;\n        }\n        var separator = dateFormat.replace(/[dmy]/g, \"\")[0];\n        var parts = date.split(separator);\n        if (parts.length !== 3) {\n            return invalidDate;\n        }\n        var day = this.parseDatePartNumber(dateFormat, date, \"dd\");\n        var month = isMonthStr ? this.parseDatePartMonthName(dateFormat, date, \"mmm\", monthLabels) : this.parseDatePartNumber(dateFormat, date, \"mm\");\n        var year = this.parseDatePartNumber(dateFormat, date, \"yyyy\");\n        if (day !== -1 && month !== -1 && year !== -1) {\n            if (year < minYear || year > maxYear || month < 1 || month > 12) {\n                return invalidDate;\n            }\n            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\n                daysInMonth[1] = 29;\n            }\n            if (day < 1 || day > daysInMonth[month - 1]) {\n                return invalidDate;\n            }\n            return { day: day, month: month, year: year };\n        }\n        return invalidDate;\n    };\n    DateRangeUtilService.ctorParameters = [];\n    return DateRangeUtilService;\n}());\n//# sourceMappingURL=my-date-range-picker.date.range.util.service.js.map \n",null]}