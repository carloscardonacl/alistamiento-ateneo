{"remainingRequest":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\mydaterangepicker\\dist\\my-date-range-picker.component.js","dependencies":[{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\mydaterangepicker\\dist\\my-date-range-picker.component.js","mtime":1576545859878},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576545781437},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1576545722790}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ElementRef, Renderer, ViewChild, ChangeDetectorRef, ViewEncapsulation, forwardRef } from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { DateRangeUtilService } from \"./services/my-date-range-picker.date.range.util.service\";\nexport var MYDRP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MyDateRangePicker; }),\n    multi: true\n};\nvar Year;\n(function (Year) {\n    Year[Year[\"min\"] = 1100] = \"min\";\n    Year[Year[\"max\"] = 9100] = \"max\";\n})(Year || (Year = {}));\nvar InputFocusBlur;\n(function (InputFocusBlur) {\n    InputFocusBlur[InputFocusBlur[\"focus\"] = 1] = \"focus\";\n    InputFocusBlur[InputFocusBlur[\"blur\"] = 2] = \"blur\";\n})(InputFocusBlur || (InputFocusBlur = {}));\nvar KeyCode;\n(function (KeyCode) {\n    KeyCode[KeyCode[\"enter\"] = 13] = \"enter\";\n    KeyCode[KeyCode[\"esc\"] = 27] = \"esc\";\n    KeyCode[KeyCode[\"space\"] = 32] = \"space\";\n})(KeyCode || (KeyCode = {}));\nvar MonthId;\n(function (MonthId) {\n    MonthId[MonthId[\"prev\"] = 1] = \"prev\";\n    MonthId[MonthId[\"curr\"] = 2] = \"curr\";\n    MonthId[MonthId[\"next\"] = 3] = \"next\";\n})(MonthId || (MonthId = {}));\nexport var MyDateRangePicker = /*@__PURE__*/ (function () {\n    function MyDateRangePicker(elem, renderer, cdr, drus) {\n        var _this = this;\n        this.elem = elem;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.drus = drus;\n        this.dateRangeChanged = new EventEmitter();\n        this.inputFieldChanged = new EventEmitter();\n        this.calendarViewChanged = new EventEmitter();\n        this.inputFocusBlur = new EventEmitter();\n        this.dateSelected = new EventEmitter();\n        this.onChangeCb = function () { };\n        this.onTouchedCb = function () { };\n        this.showSelector = false;\n        this.visibleMonth = { monthTxt: \"\", monthNbr: 0, year: 0 };\n        this.selectedMonth = { monthTxt: \"\", monthNbr: 0, year: 0 };\n        this.weekDays = [];\n        this.dates = [];\n        this.months = [];\n        this.years = [];\n        this.selectionDayTxt = \"\";\n        this.invalidDateRange = false;\n        this.dateRangeFormat = \"\";\n        this.dayIdx = 0;\n        this.weekDayOpts = [\"su\", \"mo\", \"tu\", \"we\", \"th\", \"fr\", \"sa\"];\n        this.selectMonth = false;\n        this.selectYear = false;\n        this.prevMonthDisabled = false;\n        this.nextMonthDisabled = false;\n        this.prevYearDisabled = false;\n        this.nextYearDisabled = false;\n        this.prevYearsDisabled = false;\n        this.nextYearsDisabled = false;\n        this.prevMonthId = MonthId.prev;\n        this.currMonthId = MonthId.curr;\n        this.nextMonthId = MonthId.next;\n        this.beginDate = { year: 0, month: 0, day: 0 };\n        this.endDate = { year: 0, month: 0, day: 0 };\n        this.titleAreaText = \"\";\n        this.opts = {\n            dayLabels: { su: \"Sun\", mo: \"Mon\", tu: \"Tue\", we: \"Wed\", th: \"Thu\", fr: \"Fri\", sa: \"Sat\" },\n            monthLabels: { 1: \"Jan\", 2: \"Feb\", 3: \"Mar\", 4: \"Apr\", 5: \"May\", 6: \"Jun\", 7: \"Jul\", 8: \"Aug\", 9: \"Sep\", 10: \"Oct\", 11: \"Nov\", 12: \"Dec\" },\n            dateFormat: \"yyyy-mm-dd\",\n            showClearBtn: true,\n            showApplyBtn: true,\n            showSelectDateText: true,\n            selectBeginDateTxt: \"Select Begin Date\",\n            selectEndDateTxt: \"Select End Date\",\n            firstDayOfWeek: \"mo\",\n            sunHighlight: true,\n            markCurrentDay: true,\n            markCurrentMonth: true,\n            markCurrentYear: true,\n            height: \"34px\",\n            width: \"262px\",\n            selectorHeight: \"232px\",\n            selectorWidth: \"252px\",\n            inline: false,\n            showClearDateRangeBtn: true,\n            selectionTxtFontSize: \"14px\",\n            alignSelectorRight: false,\n            indicateInvalidDateRange: true,\n            editableDateRangeField: true,\n            monthSelector: true,\n            yearSelector: true,\n            disableHeaderButtons: true,\n            showWeekNumbers: false,\n            minYear: Year.min,\n            maxYear: Year.max,\n            disableUntil: { year: 0, month: 0, day: 0 },\n            disableSince: { year: 0, month: 0, day: 0 },\n            disableDates: [],\n            enableDates: [],\n            disableDateRanges: [],\n            componentDisabled: false,\n            showSelectorArrow: true,\n            openSelectorOnInputClick: false,\n            ariaLabelInputField: \"Date range input field\",\n            ariaLabelClearDateRange: \"Clear date range\",\n            ariaLabelOpenCalendar: \"Open Calendar\",\n            ariaLabelPrevMonth: \"Previous Month\",\n            ariaLabelNextMonth: \"Next Month\",\n            ariaLabelPrevYear: \"Previous Year\",\n            ariaLabelNextYear: \"Next Year\"\n        };\n        this.globalListener = renderer.listenGlobal(\"document\", \"click\", function (event) {\n            if (_this.showSelector && event.target && _this.elem.nativeElement !== event.target && !_this.elem.nativeElement.contains(event.target)) {\n                _this.showSelector = false;\n            }\n            if (_this.opts.monthSelector || _this.opts.yearSelector) {\n                _this.resetMonthYearSelect();\n            }\n        });\n    }\n    MyDateRangePicker.prototype.resetMonthYearSelect = function () {\n        this.selectMonth = false;\n        this.selectYear = false;\n    };\n    MyDateRangePicker.prototype.onSelectMonthClicked = function (event) {\n        event.stopPropagation();\n        this.selectMonth = !this.selectMonth;\n        this.selectYear = false;\n        this.cdr.detectChanges();\n        if (this.selectMonth) {\n            var today = this.getToday();\n            this.months.length = 0;\n            for (var i = 1; i <= 12; i += 3) {\n                var row = [];\n                for (var j = i; j < i + 3; j++) {\n                    var disabled = this.drus.isMonthDisabledByDisableUntil({ year: this.visibleMonth.year, month: j, day: this.daysInMonth(j, this.visibleMonth.year) }, this.opts.disableUntil)\n                        || this.drus.isMonthDisabledByDisableSince({ year: this.visibleMonth.year, month: j, day: 1 }, this.opts.disableSince);\n                    row.push({ nbr: j, name: this.opts.monthLabels[j], currMonth: j === today.month && this.visibleMonth.year === today.year, selected: j === this.visibleMonth.monthNbr, disabled: disabled });\n                }\n                this.months.push(row);\n            }\n        }\n    };\n    MyDateRangePicker.prototype.onMonthCellClicked = function (cell) {\n        var mc = cell.nbr !== this.visibleMonth.monthNbr;\n        this.visibleMonth = { monthTxt: this.monthText(cell.nbr), monthNbr: cell.nbr, year: this.visibleMonth.year };\n        this.generateCalendar(cell.nbr, this.visibleMonth.year, mc);\n        this.selectMonth = false;\n        this.selectorEl.nativeElement.focus();\n    };\n    MyDateRangePicker.prototype.onMonthCellKeyDown = function (event, cell) {\n        if ((event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) && !cell.disabled) {\n            event.preventDefault();\n            this.onMonthCellClicked(cell);\n        }\n    };\n    MyDateRangePicker.prototype.onSelectYearClicked = function (event) {\n        event.stopPropagation();\n        this.selectYear = !this.selectYear;\n        this.selectMonth = false;\n        this.cdr.detectChanges();\n        if (this.selectYear) {\n            this.generateYears(this.visibleMonth.year);\n        }\n    };\n    MyDateRangePicker.prototype.onYearCellClicked = function (cell) {\n        var yc = cell.year !== this.visibleMonth.year;\n        this.visibleMonth = { monthTxt: this.visibleMonth.monthTxt, monthNbr: this.visibleMonth.monthNbr, year: cell.year };\n        this.generateCalendar(this.visibleMonth.monthNbr, cell.year, yc);\n        this.selectYear = false;\n        this.selectorEl.nativeElement.focus();\n    };\n    MyDateRangePicker.prototype.onYearCellKeyDown = function (event, cell) {\n        if ((event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) && !cell.disabled) {\n            event.preventDefault();\n            this.onYearCellClicked(cell);\n        }\n    };\n    MyDateRangePicker.prototype.onPrevYears = function (event, year) {\n        event.stopPropagation();\n        this.generateYears(year - 25);\n    };\n    MyDateRangePicker.prototype.onNextYears = function (event, year) {\n        event.stopPropagation();\n        this.generateYears(year + 25);\n    };\n    MyDateRangePicker.prototype.generateYears = function (year) {\n        this.years.length = 0;\n        var today = this.getToday();\n        for (var i = year; i <= 20 + year; i += 5) {\n            var row = [];\n            for (var j = i; j < i + 5; j++) {\n                var disabled = this.drus.isMonthDisabledByDisableUntil({ year: j, month: this.visibleMonth.monthNbr, day: this.daysInMonth(this.visibleMonth.monthNbr, j) }, this.opts.disableUntil)\n                    || this.drus.isMonthDisabledByDisableSince({ year: j, month: this.visibleMonth.monthNbr, day: 1 }, this.opts.disableSince);\n                var minMax = j < this.opts.minYear || j > this.opts.maxYear;\n                row.push({ year: j, currYear: j === today.year, selected: j === this.visibleMonth.year, disabled: disabled || minMax });\n            }\n            this.years.push(row);\n        }\n        this.prevYearsDisabled = this.years[0][0].year <= this.opts.minYear || this.drus.isMonthDisabledByDisableUntil({ year: this.years[0][0].year - 1, month: this.visibleMonth.monthNbr, day: this.daysInMonth(this.visibleMonth.monthNbr, this.years[0][0].year - 1) }, this.opts.disableUntil);\n        this.nextYearsDisabled = this.years[4][4].year >= this.opts.maxYear || this.drus.isMonthDisabledByDisableSince({ year: this.years[4][4].year + 1, month: this.visibleMonth.monthNbr, day: 1 }, this.opts.disableSince);\n    };\n    MyDateRangePicker.prototype.onUserDateRangeInput = function (value) {\n        this.invalidDateRange = false;\n        if (value.length === 0) {\n            if (this.drus.isInitializedDate(this.beginDate) && this.drus.isInitializedDate(this.endDate)) {\n                this.clearDateRange();\n            }\n            else {\n                this.inputFieldChanged.emit({ value: value, dateRangeFormat: this.dateRangeFormat, valid: false });\n            }\n        }\n        else {\n            var daterange = this.drus.isDateRangeValid(value, this.opts.dateFormat, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableDates, this.opts.disableDateRanges, this.opts.enableDates, this.opts.monthLabels);\n            if (this.drus.isInitializedDate(daterange.beginDate) && this.drus.isInitializedDate(daterange.endDate)) {\n                this.beginDate = daterange.beginDate;\n                this.endDate = daterange.endDate;\n                this.rangeSelected();\n            }\n            else {\n                this.invalidDateRange = true;\n                this.onChangeCb(null);\n                this.onTouchedCb();\n                this.inputFieldChanged.emit({ value: value, dateRangeFormat: this.dateRangeFormat, valid: false });\n            }\n        }\n    };\n    MyDateRangePicker.prototype.onFocusInput = function (event) {\n        this.inputFocusBlur.emit({ reason: InputFocusBlur.focus, value: event.target.value });\n    };\n    MyDateRangePicker.prototype.onBlurInput = function (event) {\n        this.selectionDayTxt = event.target.value;\n        this.onTouchedCb();\n        this.inputFocusBlur.emit({ reason: InputFocusBlur.blur, value: event.target.value });\n    };\n    MyDateRangePicker.prototype.onCloseSelector = function (event) {\n        if (event.keyCode === KeyCode.esc && this.showSelector && !this.opts.inline) {\n            this.showSelector = false;\n        }\n    };\n    MyDateRangePicker.prototype.parseOptions = function () {\n        var _this = this;\n        if (this.options !== undefined) {\n            Object.keys(this.options).forEach(function (k) {\n                _this.opts[k] = _this.options[k];\n            });\n        }\n        if (this.opts.minYear < Year.min) {\n            this.opts.minYear = Year.min;\n        }\n        if (this.opts.maxYear > Year.max) {\n            this.opts.maxYear = Year.max;\n        }\n        this.dateRangeFormat = this.opts.dateFormat + \" - \" + this.opts.dateFormat;\n        this.dayIdx = this.weekDayOpts.indexOf(this.opts.firstDayOfWeek);\n        if (this.dayIdx !== -1) {\n            var idx = this.dayIdx;\n            for (var i = 0; i < this.weekDayOpts.length; i++) {\n                this.weekDays.push(this.opts.dayLabels[this.weekDayOpts[idx]]);\n                idx = this.weekDayOpts[idx] === \"sa\" ? 0 : idx + 1;\n            }\n        }\n    };\n    MyDateRangePicker.prototype.writeValue = function (value) {\n        if (value && value[\"beginDate\"] && value[\"endDate\"]) {\n            this.beginDate = this.parseSelectedDate(value[\"beginDate\"]);\n            this.endDate = this.parseSelectedDate(value[\"endDate\"]);\n            var begin = this.formatDate(this.beginDate);\n            var end = this.formatDate(this.endDate);\n            this.selectionDayTxt = begin + \" - \" + end;\n            this.titleAreaText = this.selectionDayTxt;\n            this.inputFieldChanged.emit({ value: this.selectionDayTxt, dateRangeFormat: this.dateRangeFormat, valid: true });\n        }\n        else if (value === null || value === \"\") {\n            this.clearRangeValues();\n            this.inputFieldChanged.emit({ value: \"\", dateRangeFormat: this.dateRangeFormat, valid: false });\n        }\n        this.invalidDateRange = false;\n    };\n    MyDateRangePicker.prototype.setDisabledState = function (disabled) {\n        this.opts.componentDisabled = disabled;\n    };\n    MyDateRangePicker.prototype.registerOnChange = function (fn) {\n        this.onChangeCb = fn;\n    };\n    MyDateRangePicker.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCb = fn;\n    };\n    MyDateRangePicker.prototype.ngOnDestroy = function () {\n        this.globalListener();\n    };\n    MyDateRangePicker.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes.hasOwnProperty(\"placeholder\")) {\n            this.placeholder = changes[\"placeholder\"].currentValue;\n        }\n        if (changes.hasOwnProperty(\"options\")) {\n            this.options = changes[\"options\"].currentValue;\n            this.weekDays.length = 0;\n            this.parseOptions();\n        }\n        var dmChange = false;\n        if (changes.hasOwnProperty(\"defaultMonth\")) {\n            var dm = changes[\"defaultMonth\"].currentValue;\n            if (typeof dm === \"object\") {\n                dm = dm.defMonth;\n            }\n            if (dm !== null && dm !== undefined && dm !== \"\") {\n                this.selectedMonth = this.parseSelectedMonth(dm);\n            }\n            else {\n                this.selectedMonth = { monthTxt: \"\", monthNbr: 0, year: 0 };\n            }\n            dmChange = true;\n        }\n        if (changes.hasOwnProperty(\"selDateRange\")) {\n            var sdr = changes[\"selDateRange\"];\n            if (sdr.currentValue !== null && sdr.currentValue !== undefined && sdr.currentValue !== \"\") {\n                if (typeof sdr.currentValue === \"string\") {\n                    var split = sdr.currentValue.split(\" - \");\n                    this.beginDate = this.parseSelectedDate(split[0]);\n                    this.endDate = this.parseSelectedDate(split[1]);\n                    this.selectionDayTxt = sdr.currentValue;\n                }\n                else if (typeof sdr.currentValue === \"object\") {\n                    this.beginDate = this.parseSelectedDate(sdr.currentValue[\"beginDate\"]);\n                    this.endDate = this.parseSelectedDate(sdr.currentValue[\"endDate\"]);\n                    this.selectionDayTxt = this.formatDate(this.beginDate) + \" - \" + this.formatDate(this.endDate);\n                }\n                this.titleAreaText = this.selectionDayTxt;\n                setTimeout(function () {\n                    _this.onChangeCb(_this.getDateRangeModel(_this.beginDate, _this.endDate));\n                });\n                this.toBeginDate();\n            }\n            else {\n                if (!sdr.isFirstChange()) {\n                    this.clearDateRange();\n                }\n            }\n        }\n        if (this.visibleMonth.year === 0 && this.visibleMonth.monthNbr === 0 || dmChange) {\n            this.setVisibleMonth();\n        }\n        else {\n            this.visibleMonth.monthTxt = this.opts.monthLabels[this.visibleMonth.monthNbr];\n            this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, false);\n        }\n    };\n    MyDateRangePicker.prototype.removeBtnClicked = function () {\n        this.clearDateRange();\n    };\n    MyDateRangePicker.prototype.openBtnClicked = function () {\n        this.showSelector = !this.showSelector;\n        this.cdr.detectChanges();\n        if (this.showSelector) {\n            this.setVisibleMonth();\n        }\n    };\n    MyDateRangePicker.prototype.setVisibleMonth = function () {\n        if (this.drus.isInitializedDate(this.beginDate)) {\n            this.toBeginDate();\n        }\n        else {\n            var y = 0, m = 0;\n            if (this.selectedMonth.year === 0 && this.selectedMonth.monthNbr === 0) {\n                var today = this.getToday();\n                y = today.year;\n                m = today.month;\n            }\n            else {\n                y = this.selectedMonth.year;\n                m = this.selectedMonth.monthNbr;\n            }\n            this.visibleMonth = { monthTxt: this.opts.monthLabels[m], monthNbr: m, year: y };\n            this.generateCalendar(m, y, true);\n        }\n    };\n    MyDateRangePicker.prototype.onPrevMonth = function () {\n        var d = this.getDate({ year: this.visibleMonth.year, month: this.visibleMonth.monthNbr, day: 1 });\n        d.setMonth(d.getMonth() - 1);\n        var y = d.getFullYear();\n        var m = d.getMonth() + 1;\n        this.visibleMonth = { monthTxt: this.monthText(m), monthNbr: m, year: y };\n        this.generateCalendar(m, y, true);\n    };\n    MyDateRangePicker.prototype.onNextMonth = function () {\n        var d = this.getDate({ year: this.visibleMonth.year, month: this.visibleMonth.monthNbr, day: 1 });\n        d.setMonth(d.getMonth() + 1);\n        var y = d.getFullYear();\n        var m = d.getMonth() + 1;\n        this.visibleMonth = { monthTxt: this.monthText(m), monthNbr: m, year: y };\n        this.generateCalendar(m, y, true);\n    };\n    MyDateRangePicker.prototype.onPrevYear = function () {\n        if (this.visibleMonth.year - 1 < this.opts.minYear) {\n            return;\n        }\n        this.visibleMonth.year--;\n        this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, true);\n    };\n    MyDateRangePicker.prototype.onNextYear = function () {\n        if (this.visibleMonth.year + 1 > this.opts.maxYear) {\n            return;\n        }\n        this.visibleMonth.year++;\n        this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, true);\n    };\n    MyDateRangePicker.prototype.clearRangeValues = function () {\n        this.invalidDateRange = false;\n        this.selectionDayTxt = \"\";\n        this.beginDate = { year: 0, month: 0, day: 0 };\n        this.endDate = { year: 0, month: 0, day: 0 };\n        this.titleAreaText = this.opts.selectBeginDateTxt;\n        this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, false);\n    };\n    MyDateRangePicker.prototype.onCellClicked = function (cell) {\n        var bi = this.drus.isInitializedDate(this.beginDate);\n        var ei = this.drus.isInitializedDate(this.endDate);\n        if (ei) {\n            this.beginDate = { year: 0, month: 0, day: 0 };\n            this.endDate = { year: 0, month: 0, day: 0 };\n            this.titleAreaText = this.opts.selectBeginDateTxt;\n            bi = false;\n            ei = false;\n        }\n        if (!ei) {\n            if (!bi || bi && this.drus.getTimeInMilliseconds(cell.dateObj) < this.drus.getTimeInMilliseconds(this.beginDate)) {\n                this.selectBeginDate(cell.dateObj);\n                this.titleAreaText = this.formatDate(cell.dateObj) + \" - \" + this.opts.selectEndDateTxt;\n            }\n            else if (this.drus.getTimeInMilliseconds(cell.dateObj) >= this.drus.getTimeInMilliseconds(this.beginDate)) {\n                this.selectEndDate(cell.dateObj);\n                this.rangeSelected();\n                this.titleAreaText = this.formatDate(this.beginDate) + \" - \" + this.formatDate(cell.dateObj);\n            }\n        }\n    };\n    MyDateRangePicker.prototype.selectBeginDate = function (date) {\n        this.beginDate = date;\n        var formatted = this.formatDate(date);\n        this.titleAreaText = formatted + \" - \" + this.opts.selectEndDateTxt;\n        this.dateSelected.emit({ type: 1, date: date, formatted: formatted, jsdate: this.getDate(date) });\n    };\n    MyDateRangePicker.prototype.selectEndDate = function (date) {\n        this.endDate = date;\n        var formatted = this.formatDate(date);\n        this.titleAreaText = this.formatDate(this.beginDate) + \" - \" + formatted;\n        this.dateSelected.emit({ type: 2, date: date, formatted: formatted, jsdate: this.getDate(date) });\n    };\n    MyDateRangePicker.prototype.onCellKeyDown = function (event, cell) {\n        if ((event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) && !cell.disabled) {\n            event.preventDefault();\n            this.onCellClicked(cell);\n        }\n    };\n    MyDateRangePicker.prototype.onCellMouseEnter = function (cell) {\n        if (this.drus.isInitializedDate(this.beginDate) && !this.drus.isInitializedDate(this.endDate)) {\n            for (var _i = 0, _a = this.dates; _i < _a.length; _i++) {\n                var w = _a[_i];\n                for (var _b = 0, _c = w.week; _b < _c.length; _b++) {\n                    var day = _c[_b];\n                    day.range = this.drus.getTimeInMilliseconds(day.dateObj) >= this.drus.getTimeInMilliseconds(this.beginDate)\n                        && this.drus.getTimeInMilliseconds(day.dateObj) <= this.drus.getTimeInMilliseconds(cell.dateObj);\n                }\n            }\n        }\n    };\n    MyDateRangePicker.prototype.onCellMouseLeave = function () {\n        for (var _i = 0, _a = this.dates; _i < _a.length; _i++) {\n            var w = _a[_i];\n            for (var _b = 0, _c = w.week; _b < _c.length; _b++) {\n                var day = _c[_b];\n                day.range = false;\n            }\n        }\n    };\n    MyDateRangePicker.prototype.toBeginDate = function () {\n        var viewChange = this.beginDate.year !== this.visibleMonth.year || this.beginDate.month !== this.visibleMonth.monthNbr;\n        this.visibleMonth = { monthTxt: this.monthText(this.beginDate.month), monthNbr: this.beginDate.month, year: this.beginDate.year };\n        this.generateCalendar(this.beginDate.month, this.beginDate.year, viewChange);\n    };\n    MyDateRangePicker.prototype.clearDateRange = function () {\n        if (this.drus.isInitializedDate(this.endDate)) {\n            this.dateRangeChanged.emit({ beginDate: { year: 0, month: 0, day: 0 }, beginJsDate: null, endDate: { year: 0, month: 0, day: 0 }, endJsDate: null, formatted: \"\", beginEpoc: 0, endEpoc: 0 });\n            if (this.selectionDayTxt !== \"\") {\n                this.inputFieldChanged.emit({ value: \"\", dateRangeFormat: this.dateRangeFormat, valid: false });\n            }\n            this.onChangeCb(null);\n            this.onTouchedCb();\n        }\n        this.clearRangeValues();\n    };\n    MyDateRangePicker.prototype.rangeSelected = function () {\n        var dateRangeModel = this.getDateRangeModel(this.beginDate, this.endDate);\n        this.selectionDayTxt = this.formatDate(this.beginDate) + \" - \" + this.formatDate(this.endDate);\n        this.showSelector = false;\n        this.dateRangeChanged.emit(dateRangeModel);\n        this.inputFieldChanged.emit({ value: this.selectionDayTxt, dateRangeFormat: this.dateRangeFormat, valid: true });\n        this.onChangeCb(dateRangeModel);\n        this.onTouchedCb();\n        this.invalidDateRange = false;\n        if (this.opts.monthSelector || this.opts.yearSelector) {\n            this.resetMonthYearSelect();\n        }\n    };\n    MyDateRangePicker.prototype.getDateRangeModel = function (beginDate, endDate) {\n        var bEpoc = this.drus.getTimeInMilliseconds(beginDate) / 1000.0;\n        var eEpoc = this.drus.getTimeInMilliseconds(endDate) / 1000.0;\n        return { beginDate: beginDate, beginJsDate: this.getDate(beginDate), endDate: endDate, endJsDate: this.getDate(endDate), formatted: this.formatDate(beginDate) + \" - \" + this.formatDate(endDate), beginEpoc: bEpoc, endEpoc: eEpoc };\n    };\n    MyDateRangePicker.prototype.isInRange = function (val) {\n        if (!this.drus.isInitializedDate(this.beginDate) || !this.drus.isInitializedDate(this.endDate)) {\n            return false;\n        }\n        var input = this.drus.getTimeInMilliseconds(val.dateObj);\n        if (input >= this.drus.getTimeInMilliseconds(this.beginDate) && input <= this.drus.getTimeInMilliseconds(this.endDate)) {\n            return true;\n        }\n        return false;\n    };\n    MyDateRangePicker.prototype.isRangeSelected = function () {\n        if (this.drus.isInitializedDate(this.beginDate) && this.drus.isInitializedDate(this.endDate)) {\n            return true;\n        }\n        return false;\n    };\n    MyDateRangePicker.prototype.preZero = function (val) {\n        return parseInt(val) < 10 ? \"0\" + val : val;\n    };\n    MyDateRangePicker.prototype.formatDate = function (val) {\n        var formatted = this.opts.dateFormat.replace(\"yyyy\", val.year).replace(\"dd\", this.preZero(val.day));\n        return this.opts.dateFormat.indexOf(\"mmm\") !== -1 ? formatted.replace(\"mmm\", this.monthText(val.month)) : formatted.replace(\"mm\", this.preZero(val.month));\n    };\n    MyDateRangePicker.prototype.monthText = function (m) {\n        return this.opts.monthLabels[m];\n    };\n    MyDateRangePicker.prototype.monthStartIdx = function (y, m) {\n        var d = new Date();\n        d.setDate(1);\n        d.setMonth(m - 1);\n        d.setFullYear(y);\n        var idx = d.getDay() + this.sundayIdx();\n        return idx >= 7 ? idx - 7 : idx;\n    };\n    MyDateRangePicker.prototype.daysInMonth = function (m, y) {\n        return new Date(y, m, 0).getDate();\n    };\n    MyDateRangePicker.prototype.daysInPrevMonth = function (m, y) {\n        var d = this.getDate({ year: y, month: m, day: 1 });\n        d.setMonth(d.getMonth() - 1);\n        return this.daysInMonth(d.getMonth() + 1, d.getFullYear());\n    };\n    MyDateRangePicker.prototype.isCurrDay = function (d, m, y, cmo, today) {\n        return d === today.day && m === today.month && y === today.year && cmo === this.currMonthId;\n    };\n    MyDateRangePicker.prototype.getPreviousDate = function (date) {\n        var d = this.getDate(date);\n        d.setDate(d.getDate() - 1);\n        return { year: d.getFullYear(), month: d.getMonth() + 1, day: d.getDate() };\n    };\n    MyDateRangePicker.prototype.getNextDate = function (date) {\n        var d = this.getDate(date);\n        d.setDate(d.getDate() + 1);\n        return { year: d.getFullYear(), month: d.getMonth() + 1, day: d.getDate() };\n    };\n    MyDateRangePicker.prototype.getDayNumber = function (date) {\n        var d = this.getDate(date);\n        return d.getDay();\n    };\n    MyDateRangePicker.prototype.getWeekday = function (date) {\n        return this.weekDayOpts[this.getDayNumber(date)];\n    };\n    MyDateRangePicker.prototype.getDate = function (date) {\n        return new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);\n    };\n    MyDateRangePicker.prototype.getToday = function () {\n        var date = new Date();\n        return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\n    };\n    MyDateRangePicker.prototype.sundayIdx = function () {\n        return this.dayIdx > 0 ? 7 - this.dayIdx : 0;\n    };\n    MyDateRangePicker.prototype.generateCalendar = function (m, y, viewChange) {\n        this.dates.length = 0;\n        var today = this.getToday();\n        var monthStart = this.monthStartIdx(y, m);\n        var dInThisM = this.daysInMonth(m, y);\n        var dInPrevM = this.daysInPrevMonth(m, y);\n        var dayNbr = 1;\n        var cmo = this.prevMonthId;\n        for (var i = 1; i < 7; i++) {\n            var week = [];\n            if (i === 1) {\n                var pm = dInPrevM - monthStart + 1;\n                for (var j = pm; j <= dInPrevM; j++) {\n                    var date = { year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: j };\n                    week.push({ dateObj: date,\n                        cmo: cmo, currDay: this.isCurrDay(j, m, y, cmo, today),\n                        dayNbr: this.getDayNumber(date),\n                        disabled: this.drus.isDisabledDay(date, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableDates, this.opts.disableDateRanges, this.opts.enableDates),\n                        range: false });\n                }\n                cmo = this.currMonthId;\n                var daysLeft = 7 - week.length;\n                for (var j = 0; j < daysLeft; j++) {\n                    var date = { year: y, month: m, day: dayNbr };\n                    week.push({ dateObj: date,\n                        cmo: cmo,\n                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),\n                        dayNbr: this.getDayNumber(date),\n                        disabled: this.drus.isDisabledDay(date, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableDates, this.opts.disableDateRanges, this.opts.enableDates),\n                        range: false });\n                    dayNbr++;\n                }\n            }\n            else {\n                for (var j = 1; j < 8; j++) {\n                    if (dayNbr > dInThisM) {\n                        dayNbr = 1;\n                        cmo = this.nextMonthId;\n                    }\n                    var date = { year: cmo === this.nextMonthId && m === 12 ? y + 1 : y, month: cmo === this.currMonthId ? m : cmo === this.nextMonthId && m < 12 ? m + 1 : 1, day: dayNbr };\n                    week.push({ dateObj: date,\n                        cmo: cmo,\n                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),\n                        dayNbr: this.getDayNumber(date),\n                        disabled: this.drus.isDisabledDay(date, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableDates, this.opts.disableDateRanges, this.opts.enableDates),\n                        range: false });\n                    dayNbr++;\n                }\n            }\n            var weekNbr = this.opts.showWeekNumbers && this.opts.firstDayOfWeek === \"mo\" ? this.drus.getWeekNumber(week[0].dateObj) : 0;\n            this.dates.push({ week: week, weekNbr: weekNbr });\n        }\n        this.setHeaderBtnDisabledState(m, y);\n        if (viewChange) {\n            this.calendarViewChanged.emit({ year: y, month: m, first: { number: 1, weekday: this.getWeekday({ year: y, month: m, day: 1 }) }, last: { number: dInThisM, weekday: this.getWeekday({ year: y, month: m, day: dInThisM }) } });\n        }\n    };\n    MyDateRangePicker.prototype.setHeaderBtnDisabledState = function (m, y) {\n        var dpm = false;\n        var dpy = false;\n        var dnm = false;\n        var dny = false;\n        if (this.opts.disableHeaderButtons) {\n            dpm = this.drus.isMonthDisabledByDisableUntil({ year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: this.daysInMonth(m === 1 ? 12 : m - 1, m === 1 ? y - 1 : y) }, this.opts.disableUntil);\n            dpy = this.drus.isMonthDisabledByDisableUntil({ year: y - 1, month: m, day: this.daysInMonth(m, y - 1) }, this.opts.disableUntil);\n            dnm = this.drus.isMonthDisabledByDisableSince({ year: m === 12 ? y + 1 : y, month: m === 12 ? 1 : m + 1, day: 1 }, this.opts.disableSince);\n            dny = this.drus.isMonthDisabledByDisableSince({ year: y + 1, month: m, day: 1 }, this.opts.disableSince);\n        }\n        this.prevMonthDisabled = m === 1 && y === this.opts.minYear || dpm;\n        this.prevYearDisabled = y - 1 < this.opts.minYear || dpy;\n        this.nextMonthDisabled = m === 12 && y === this.opts.maxYear || dnm;\n        this.nextYearDisabled = y + 1 > this.opts.maxYear || dny;\n    };\n    MyDateRangePicker.prototype.parseSelectedDate = function (selDate) {\n        var date = { day: 0, month: 0, year: 0 };\n        if (typeof selDate === \"string\") {\n            var sd = selDate;\n            date.day = this.drus.parseDatePartNumber(this.opts.dateFormat, sd, \"dd\");\n            date.month = this.opts.dateFormat.indexOf(\"mmm\") !== -1\n                ? this.drus.parseDatePartMonthName(this.opts.dateFormat, sd, \"mmm\", this.opts.monthLabels)\n                : this.drus.parseDatePartNumber(this.opts.dateFormat, sd, \"mm\");\n            date.year = this.drus.parseDatePartNumber(this.opts.dateFormat, sd, \"yyyy\");\n        }\n        else if (typeof selDate === \"object\") {\n            date = selDate;\n        }\n        return date;\n    };\n    MyDateRangePicker.prototype.parseSelectedMonth = function (ms) {\n        return this.drus.parseDefaultMonth(ms);\n    };\n    MyDateRangePicker.ctorParameters = [\n        { type: ElementRef, },\n        { type: Renderer, },\n        { type: ChangeDetectorRef, },\n        { type: DateRangeUtilService, },\n    ];\n    return MyDateRangePicker;\n}());\n//# sourceMappingURL=my-date-range-picker.component.js.map \n",null]}