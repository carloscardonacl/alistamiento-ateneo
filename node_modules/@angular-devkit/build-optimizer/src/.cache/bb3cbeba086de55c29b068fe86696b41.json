{"remainingRequest":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@tinymce\\tinymce-angular\\esm5\\tinymce-tinymce-angular.js","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@tinymce\\tinymce-angular\\esm5\\tinymce-tinymce-angular.js","mtime":1537362206444},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535664048428},{"path":"C:\\Users\\User\\Desktop\\Master-Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1535664036292}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Output, EventEmitter, Component, Input, ElementRef, forwardRef, NgZone, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nvar Events = /*@__PURE__*/ (function () {\n    function Events() {\n        this.onBeforePaste = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onClick = new EventEmitter();\n        this.onContextMenu = new EventEmitter();\n        this.onCopy = new EventEmitter();\n        this.onCut = new EventEmitter();\n        this.onDblclick = new EventEmitter();\n        this.onDrag = new EventEmitter();\n        this.onDragDrop = new EventEmitter();\n        this.onDragEnd = new EventEmitter();\n        this.onDragGesture = new EventEmitter();\n        this.onDragOver = new EventEmitter();\n        this.onDrop = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onFocusIn = new EventEmitter();\n        this.onFocusOut = new EventEmitter();\n        this.onKeyDown = new EventEmitter();\n        this.onKeyPress = new EventEmitter();\n        this.onKeyUp = new EventEmitter();\n        this.onMouseDown = new EventEmitter();\n        this.onMouseEnter = new EventEmitter();\n        this.onMouseLeave = new EventEmitter();\n        this.onMouseMove = new EventEmitter();\n        this.onMouseOut = new EventEmitter();\n        this.onMouseOver = new EventEmitter();\n        this.onMouseUp = new EventEmitter();\n        this.onPaste = new EventEmitter();\n        this.onSelectionChange = new EventEmitter();\n        this.onActivate = new EventEmitter();\n        this.onAddUndo = new EventEmitter();\n        this.onBeforeAddUndo = new EventEmitter();\n        this.onBeforeExecCommand = new EventEmitter();\n        this.onBeforeGetContent = new EventEmitter();\n        this.onBeforeRenderUI = new EventEmitter();\n        this.onBeforeSetContent = new EventEmitter();\n        this.onChange = new EventEmitter();\n        this.onClearUndos = new EventEmitter();\n        this.onDeactivate = new EventEmitter();\n        this.onDirty = new EventEmitter();\n        this.onExecCommand = new EventEmitter();\n        this.onGetContent = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.onInit = new EventEmitter();\n        this.onLoadContent = new EventEmitter();\n        this.onNodeChange = new EventEmitter();\n        this.onPostProcess = new EventEmitter();\n        this.onPostRender = new EventEmitter();\n        this.onPreInit = new EventEmitter();\n        this.onPreProcess = new EventEmitter();\n        this.onProgressState = new EventEmitter();\n        this.onRedo = new EventEmitter();\n        this.onRemove = new EventEmitter();\n        this.onReset = new EventEmitter();\n        this.onSaveContent = new EventEmitter();\n        this.onSetAttrib = new EventEmitter();\n        this.onObjectResizeStart = new EventEmitter();\n        this.onObjectResized = new EventEmitter();\n        this.onObjectSelected = new EventEmitter();\n        this.onSetContent = new EventEmitter();\n        this.onShow = new EventEmitter();\n        this.onSubmit = new EventEmitter();\n        this.onUndo = new EventEmitter();\n        this.onVisualAid = new EventEmitter();\n    }\n    return Events;\n}());\nvar validEvents = [\n    'onActivate',\n    'onAddUndo',\n    'onBeforeAddUndo',\n    'onBeforeExecCommand',\n    'onBeforeGetContent',\n    'onBeforeRenderUI',\n    'onBeforeSetContent',\n    'onBeforePaste',\n    'onBlur',\n    'onChange',\n    'onClearUndos',\n    'onClick',\n    'onContextMenu',\n    'onCopy',\n    'onCut',\n    'onDblclick',\n    'onDeactivate',\n    'onDirty',\n    'onDrag',\n    'onDragDrop',\n    'onDragEnd',\n    'onDragGesture',\n    'onDragOver',\n    'onDrop',\n    'onExecCommand',\n    'onFocus',\n    'onFocusIn',\n    'onFocusOut',\n    'onGetContent',\n    'onHide',\n    'onInit',\n    'onKeyDown',\n    'onKeyPress',\n    'onKeyUp',\n    'onLoadContent',\n    'onMouseDown',\n    'onMouseEnter',\n    'onMouseLeave',\n    'onMouseMove',\n    'onMouseOut',\n    'onMouseOver',\n    'onMouseUp',\n    'onNodeChange',\n    'onObjectResizeStart',\n    'onObjectResized',\n    'onObjectSelected',\n    'onPaste',\n    'onPostProcess',\n    'onPostRender',\n    'onPreProcess',\n    'onProgressState',\n    'onRedo',\n    'onRemove',\n    'onReset',\n    'onSaveContent',\n    'onSelectionChange',\n    'onSetAttrib',\n    'onSetContent',\n    'onShow',\n    'onSubmit',\n    'onUndo',\n    'onVisualAid'\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nvar bindHandlers = function (ctx, editor, initEvent) {\n    validEvents.forEach(function (eventName) {\n        var /** @type {?} */ eventEmitter = ctx[eventName];\n        if (eventEmitter.observers.length > 0) {\n            if (eventName === 'onInit') {\n                ctx.ngZone.run(function () { return eventEmitter.emit({ event: initEvent, editor: editor }); });\n            }\n            else {\n                editor.on(eventName.substring(2), ctx.ngZone.run(function () { return function (event) { return eventEmitter.emit({ event: event, editor: editor }); }; }));\n            }\n        }\n    });\n};\nvar unique = 0;\nvar uuid = function (prefix) {\n    var /** @type {?} */ date = new Date();\n    var /** @type {?} */ time = date.getTime();\n    var /** @type {?} */ random = Math.floor(Math.random() * 1000000000);\n    unique++;\n    return prefix + '_' + random + unique + String(time);\n};\nvar isTextarea = function (element) {\n    return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n};\nvar normalizePluginArray = function (plugins) {\n    if (typeof plugins === 'undefined' || plugins === '') {\n        return [];\n    }\n    return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\nvar mergePlugins = function (initPlugins, inputPlugins) { return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins)); };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/**\n * @record\n */\nvar injectScriptTag = function (scriptId, doc, url, callback) {\n    var /** @type {?} */ scriptTag = doc.createElement('script');\n    scriptTag.type = 'application/javascript';\n    scriptTag.id = scriptId;\n    scriptTag.addEventListener('load', callback);\n    scriptTag.src = url;\n    doc.head.appendChild(scriptTag);\n};\nvar create = function () {\n    return {\n        listeners: [],\n        scriptId: uuid('tiny-script'),\n        scriptLoaded: false\n    };\n};\nvar load = function (state, doc, url, callback) {\n    if (state.scriptLoaded) {\n        callback();\n    }\n    else {\n        state.listeners.push(callback);\n        if (!doc.getElementById(state.scriptId)) {\n            injectScriptTag(state.scriptId, doc, url, function () {\n                state.listeners.forEach(function (fn) { return fn(); });\n                state.scriptLoaded = true;\n            });\n        }\n    }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nvar getTinymce = function () {\n    var /** @type {?} */ w = (window);\n    return w && w.tinymce ? w.tinymce : null;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar scriptState = create();\nvar EDITOR_COMPONENT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return EditorComponent; }),\n    multi: true\n};\nvar EditorComponent = (function (_super) {\n    tslib_1.__extends(EditorComponent, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     */\n    function EditorComponent(elementRef, ngZone) {\n        var _this = _super.call(this) || this;\n        _this.element = undefined;\n        _this.id = '';\n        _this.toolbar = null;\n        _this.onTouchedCallback = function () { };\n        _this.onChangeCallback = function (x) { };\n        _this.elementRef = elementRef;\n        _this.ngZone = ngZone;\n        _this.initialise = _this.initialise.bind(_this);\n        return _this;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    EditorComponent.prototype.writeValue = function (value) {\n        this.initialValue = value || this.initialValue;\n        if (this.editor && this.editor.initialized && typeof value === 'string') {\n            this.editor.setContent(value);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EditorComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EditorComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    EditorComponent.prototype.setDisabledState = function (isDisabled) {\n        if (this.editor) {\n            this.editor.setMode(isDisabled ? 'readonly' : 'design');\n        }\n        else if (isDisabled) {\n            this.init = Object.assign({}, this.init, { readonly: true });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EditorComponent.prototype.ngAfterViewInit = function () {\n        this.id = this.id || uuid('tiny-react');\n        this.inline = typeof this.inline !== 'undefined' ? this.inline : this.init && this.init[\"inline\"];\n        this.createElement();\n        if (getTinymce() !== null) {\n            this.initialise();\n        }\n        else if (this.element) {\n            var /** @type {?} */ doc = this.element.ownerDocument;\n            var /** @type {?} */ channel = this.cloudChannel || 'stable';\n            var /** @type {?} */ apiKey = this.apiKey || '';\n            load(scriptState, doc, \"https://cloud.tinymce.com/\" + channel + \"/tinymce.min.js?apiKey=\" + apiKey, this.initialise);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EditorComponent.prototype.ngOnDestroy = function () {\n        if (getTinymce() !== null) {\n            getTinymce().remove(this.editor);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EditorComponent.prototype.createElement = function () {\n        var /** @type {?} */ tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n        this.element = document.createElement(this.inline ? tagName : 'textarea');\n        if (this.element) {\n            this.element.id = this.id;\n            if (isTextarea(this.element)) {\n                this.element.style.visibility = 'hidden';\n            }\n            this.elementRef.nativeElement.appendChild(this.element);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EditorComponent.prototype.initialise = function () {\n        var _this = this;\n        var /** @type {?} */ finalInit = Object.assign({}, this.init, { selector: \"#\" + this.id, inline: this.inline, plugins: mergePlugins(this.init && this.init[\"plugins\"], this.plugins), toolbar: this.toolbar || (this.init && this.init[\"toolbar\"]), setup: function (editor) {\n                _this.editor = editor;\n                editor.on('init', function (e) {\n                    _this.initEditor(e, editor);\n                });\n                if (_this.init && typeof _this.init[\"setup\"] === 'function') {\n                    _this.init[\"setup\"](editor);\n                }\n            } });\n        if (isTextarea(this.element)) {\n            this.element.style.visibility = '';\n        }\n        this.ngZone.runOutsideAngular(function () {\n            getTinymce().init(finalInit);\n        });\n    };\n    /**\n     * @param {?} initEvent\n     * @param {?} editor\n     * @return {?}\n     */\n    EditorComponent.prototype.initEditor = function (initEvent, editor) {\n        var _this = this;\n        if (typeof this.initialValue === 'string') {\n            this.ngZone.run(function () { return editor.setContent(_this.initialValue); });\n        }\n        editor.once('blur', function () { return _this.ngZone.run(function () { return _this.onTouchedCallback(); }); });\n        editor.on('setcontent', function (_a) {\n            var content = _a.content, format = _a.format;\n            return format === 'html' && content && _this.ngZone.run(function () { return _this.onChangeCallback(content); });\n        });\n        editor.on('change keyup undo redo', function () { return _this.ngZone.run(function () { return _this.onChangeCallback(editor.getContent()); }); });\n        bindHandlers(this, editor, initEvent);\n    };\n    return EditorComponent;\n}(Events));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar EditorModule = /*@__PURE__*/ (function () {\n    function EditorModule() {\n    }\n    return EditorModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { EditorModule, Events as ɵb, EditorComponent as ɵa };\n//# sourceMappingURL=tinymce-tinymce-angular.js.map\n",null]}