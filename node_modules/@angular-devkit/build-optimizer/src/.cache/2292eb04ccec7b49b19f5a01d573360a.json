{"remainingRequest":"D:\\SIGESPRO\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SIGESPRO\\sigespro\\node_modules\\ng2-archwizard\\dist\\navigation\\wizard-state.model.js","dependencies":[{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\ng2-archwizard\\dist\\navigation\\wizard-state.model.js","mtime":1582660892144},{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582660885942},{"path":"D:\\SIGESPRO\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1582660881929}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { MovingDirection } from '../util/moving-direction.enum';\nimport { navigationModeFactory } from './navigation-mode.provider';\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\nvar WizardState = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     */\n    function WizardState() {\n        /**\n         * The initial step index, as taken from the [[WizardComponent]]\n         */\n        this._defaultStepIndex = 0;\n        /**\n         * The index of the currently visible and selected step inside the wizardSteps QueryList.\n         * If this wizard contains no steps, currentStepIndex is -1\n         */\n        this.currentStepIndex = -1;\n    }\n    Object.defineProperty(WizardState.prototype, \"wizardSteps\", {\n        /**\n         * An array representation of all wizard steps belonging to this model\n         */\n        get: function () {\n            /* istanbul ignore else */\n            if (this._wizardSteps) {\n                return this._wizardSteps.toArray();\n            }\n            else {\n                return [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardState.prototype, \"defaultStepIndex\", {\n        /**\n         * The initial step index.\n         * This value can be either:\n         * - the index of a wizard step with a `selected` directive, or\n         * - the default step index, set in the [[WizardComponent]]\n         */\n        get: function () {\n            var foundDefaultStep = this.wizardSteps.find(function (step) { return step.defaultSelected; });\n            if (foundDefaultStep) {\n                return this.getIndexOfStep(foundDefaultStep);\n            }\n            else {\n                return this._defaultStepIndex;\n            }\n        },\n        /**\n         * Sets the initial default step.\n         * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n         *\n         * @param defaultStepIndex The new default wizard step index\n         */\n        set: function (defaultStepIndex) {\n            this._defaultStepIndex = defaultStepIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(WizardState.prototype, \"currentStep\", {\n        /**\n         * The WizardStep object belonging to the currently visible and selected step.\n         * The currentStep is always the currently selected wizard step.\n         * The currentStep can be either completed, if it was visited earlier,\n         * or not completed, if it is visited for the first time or its state is currently out of date.\n         *\n         * If this wizard contains no steps, currentStep is null\n         */\n        get: function () {\n            if (this.hasStep(this.currentStepIndex)) {\n                return this.wizardSteps[this.currentStepIndex];\n            }\n            else {\n                return null;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardState.prototype, \"completed\", {\n        /**\n         * The completeness of the wizard.\n         * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n         */\n        get: function () {\n            return this.wizardSteps.every(function (step) { return step.completed || step.optional; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initializes the wizard state with the given array of wizard steps.\n     * This process contains a reset of the wizard\n     *\n     * @param {QueryList<WizardStep>} wizardSteps The wizard steps\n     * @param {string} navigationMode The name of the navigation mode to be set\n     * @param {string} defaultStepIndex The default step index, to be used during the initialisation\n     * @param {boolean} disableNavigationBar True, if the navigation bar should be disabled, i.e. not be used for navigating\n     */\n    WizardState.prototype.initialize = function (wizardSteps, navigationMode, defaultStepIndex, disableNavigationBar) {\n        this._wizardSteps = wizardSteps;\n        this._defaultStepIndex = defaultStepIndex;\n        this.disableNavigationBar = disableNavigationBar;\n        this.navigationMode = navigationModeFactory(navigationMode, this);\n        this.navigationMode.reset();\n    };\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param stepIndex The to be checked index of a step inside this wizard\n     * @returns {boolean} True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n    WizardState.prototype.hasStep = function (stepIndex) {\n        return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n    };\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @returns {boolean} True if this wizard has a previous step before the current step\n     */\n    WizardState.prototype.hasPreviousStep = function () {\n        return this.hasStep(this.currentStepIndex - 1);\n    };\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @returns {boolean} True if this wizard has a next step after the current step\n     */\n    WizardState.prototype.hasNextStep = function () {\n        return this.hasStep(this.currentStepIndex + 1);\n    };\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @returns {boolean} True if the wizard is currently inside its last step\n     */\n    WizardState.prototype.isLastStep = function () {\n        return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n    };\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @param stepIndex The given index\n     * @returns {undefined|WizardStep} The found [[WizardStep]] at the given index `stepIndex`\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     */\n    WizardState.prototype.getStepAtIndex = function (stepIndex) {\n        if (!this.hasStep(stepIndex)) {\n            throw new Error(\"Expected a known step, but got stepIndex: \" + stepIndex + \".\");\n        }\n        return this.wizardSteps[stepIndex];\n    };\n    /**\n     * Find the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param step The given [[WizardStep]]\n     * @returns {number} The found index of `step` or `-1` if the step is not included in the wizard\n     */\n    WizardState.prototype.getIndexOfStep = function (step) {\n        return this.wizardSteps.indexOf(step);\n    };\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param destinationStep The given destination step\n     * @returns {MovingDirection} The calculated [[MovingDirection]]\n     */\n    WizardState.prototype.getMovingDirection = function (destinationStep) {\n        var movingDirection;\n        if (destinationStep > this.currentStepIndex) {\n            movingDirection = MovingDirection.Forwards;\n        }\n        else if (destinationStep < this.currentStepIndex) {\n            movingDirection = MovingDirection.Backwards;\n        }\n        else {\n            movingDirection = MovingDirection.Stay;\n        }\n        return movingDirection;\n    };\n    return WizardState;\n}());\nexport { WizardState };\n//# sourceMappingURL=wizard-state.model.js.map \n",null]}