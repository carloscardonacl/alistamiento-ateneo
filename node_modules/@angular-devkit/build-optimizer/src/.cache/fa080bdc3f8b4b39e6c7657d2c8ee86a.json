{"remainingRequest":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\ng2-archwizard\\dist\\components\\wizard-navigation-bar.component.js","dependencies":[{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\ng2-archwizard\\dist\\components\\wizard-navigation-bar.component.js","mtime":1576545865792},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576545781437},{"path":"C:\\Users\\Gerente CorvusLab\\Desktop\\Master_Sigespro\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1576545722790}],"contextDependencies":[],"result":["import { Component, Input } from '@angular/core';\nimport { WizardState } from '../navigation/wizard-state.model';\n/**\n * The `wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <wizard-navigation-bar></wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\nvar WizardNavigationBarComponent = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     *\n     * @param wizardState The state the wizard currently resides in\n     */\n    function WizardNavigationBarComponent(wizardState) {\n        this.wizardState = wizardState;\n        /**\n         * The direction in which the wizard steps should be shown in the navigation bar.\n         * This value can be either `left-to-right` or `right-to-left`\n         */\n        this.direction = 'left-to-right';\n    }\n    Object.defineProperty(WizardNavigationBarComponent.prototype, \"navigationMode\", {\n        /**\n         * The navigation mode\n         *\n         * @returns {NavigationMode}\n         */\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationBarComponent.prototype, \"wizardSteps\", {\n        /**\n         * Returns all [[WizardStep]]s contained in the wizard\n         *\n         * @returns {Array<WizardStep>} An array containing all [[WizardStep]]s\n         */\n        get: function () {\n            switch (this.direction) {\n                case 'right-to-left':\n                    return this.wizardState.wizardSteps.reverse();\n                case 'left-to-right':\n                default:\n                    return this.wizardState.wizardSteps;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationBarComponent.prototype, \"numberOfWizardSteps\", {\n        /**\n         * Returns the number of wizard steps, that need to be displaced in the navigation bar\n         *\n         * @returns {number} The number of wizard steps to be displayed\n         */\n        get: function () {\n            return this.wizardState.wizardSteps.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n     *\n     * @param {WizardStep} wizardStep The wizard step to be checked\n     * @returns {boolean} True if the step can be marked as current\n     */\n    WizardNavigationBarComponent.prototype.isCurrent = function (wizardStep) {\n        return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n    };\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n     *\n     * @param {WizardStep} wizardStep The wizard step to be checked\n     * @returns {boolean} True if the step can be marked as done\n     */\n    WizardNavigationBarComponent.prototype.isDone = function (wizardStep) {\n        return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n    };\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n     *\n     * @param {WizardStep} wizardStep The wizard step to be checked\n     * @returns {boolean} True if the step can be marked as default\n     */\n    WizardNavigationBarComponent.prototype.isDefault = function (wizardStep) {\n        return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n    };\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n     *\n     * @param {WizardStep} wizardStep The wizard step to be checked\n     * @returns {boolean} True if the step can be marked as editing\n     */\n    WizardNavigationBarComponent.prototype.isEditing = function (wizardStep) {\n        return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n    };\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n     *\n     * @param {WizardStep} wizardStep The wizard step to be checked\n     * @returns {boolean} True if the step can be marked as optional\n     */\n    WizardNavigationBarComponent.prototype.isOptional = function (wizardStep) {\n        return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n    };\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n     * A wizard step can be navigated to if:\n     * - the step is currently not selected\n     * - the navigation bar isn't disabled\n     * - the navigation mode allows navigation to the step\n     *\n     * @param {WizardStep} wizardStep The wizard step to be checked\n     * @returns {boolean} True if the step can be marked as navigable\n     */\n    WizardNavigationBarComponent.prototype.isNavigable = function (wizardStep) {\n        return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n            this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n    };\n    return WizardNavigationBarComponent;\n}());\nexport { WizardNavigationBarComponent };\n//# sourceMappingURL=wizard-navigation-bar.component.js.map \n",null]}