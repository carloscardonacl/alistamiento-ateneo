{"remainingRequest":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\ngx-treeview\\src\\treeview-item.js","dependencies":[{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\ngx-treeview\\src\\treeview-item.js","mtime":1584367103466},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584367093869},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584367088163}],"contextDependencies":[],"result":["import { isBoolean, isNil, isString } from 'lodash';\r\nimport { TreeviewHelper } from './treeview-helper';\r\nvar TreeviewItem = /*@__PURE__*/ (function () {\r\n    function TreeviewItem(item, autoCorrectChecked) {\r\n        if (autoCorrectChecked === void 0) {\r\n            autoCorrectChecked = false;\r\n        }\r\n        var _this = this;\r\n        this.internalDisabled = false;\r\n        this.internalChecked = true;\r\n        this.internalCollapsed = false;\r\n        if (isNil(item)) {\r\n            throw new Error('Item must be defined');\r\n        }\r\n        if (isString(item.text)) {\r\n            this.text = item.text;\r\n        }\r\n        else {\r\n            throw new Error('A text of item must be string object');\r\n        }\r\n        this.value = item.value;\r\n        if (isBoolean(item.checked)) {\r\n            this.checked = item.checked;\r\n        }\r\n        if (isBoolean(item.collapsed)) {\r\n            this.collapsed = item.collapsed;\r\n        }\r\n        if (isBoolean(item.disabled)) {\r\n            this.disabled = item.disabled;\r\n        }\r\n        if (!isNil(item.children) && item.children.length > 0) {\r\n            this.children = item.children.map(function (child) {\r\n                if (_this.disabled === true) {\r\n                    child.disabled = true;\r\n                }\r\n                return new TreeviewItem(child);\r\n            });\r\n        }\r\n        if (autoCorrectChecked) {\r\n            this.correctChecked();\r\n        }\r\n    }\r\n    Object.defineProperty(TreeviewItem.prototype, \"checked\", {\r\n        get: function () {\r\n            return this.internalChecked;\r\n        },\r\n        set: function (value) {\r\n            if (!this.internalDisabled) {\r\n                if (this.internalChecked !== value) {\r\n                    this.internalChecked = value;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeviewItem.prototype, \"indeterminate\", {\r\n        get: function () {\r\n            return this.checked === undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TreeviewItem.prototype.setCheckedRecursive = function (value) {\r\n        if (!this.internalDisabled) {\r\n            this.internalChecked = value;\r\n            if (!isNil(this.internalChildren)) {\r\n                this.internalChildren.forEach(function (child) { return child.setCheckedRecursive(value); });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(TreeviewItem.prototype, \"disabled\", {\r\n        get: function () {\r\n            return this.internalDisabled;\r\n        },\r\n        set: function (value) {\r\n            if (this.internalDisabled !== value) {\r\n                this.internalDisabled = value;\r\n                if (!isNil(this.internalChildren)) {\r\n                    this.internalChildren.forEach(function (child) { return child.disabled = value; });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeviewItem.prototype, \"collapsed\", {\r\n        get: function () {\r\n            return this.internalCollapsed;\r\n        },\r\n        set: function (value) {\r\n            if (this.internalCollapsed !== value) {\r\n                this.internalCollapsed = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TreeviewItem.prototype.setCollapsedRecursive = function (value) {\r\n        this.internalCollapsed = value;\r\n        if (!isNil(this.internalChildren)) {\r\n            this.internalChildren.forEach(function (child) { return child.setCollapsedRecursive(value); });\r\n        }\r\n    };\r\n    Object.defineProperty(TreeviewItem.prototype, \"children\", {\r\n        get: function () {\r\n            return this.internalChildren;\r\n        },\r\n        set: function (value) {\r\n            if (this.internalChildren !== value) {\r\n                if (!isNil(value) && value.length === 0) {\r\n                    throw new Error('Children must be not an empty array');\r\n                }\r\n                this.internalChildren = value;\r\n                if (!isNil(this.internalChildren)) {\r\n                    var checked_1 = null;\r\n                    this.internalChildren.forEach(function (child) {\r\n                        if (checked_1 === null) {\r\n                            checked_1 = child.checked;\r\n                        }\r\n                        else {\r\n                            if (child.checked !== checked_1) {\r\n                                checked_1 = undefined;\r\n                                return;\r\n                            }\r\n                        }\r\n                    });\r\n                    this.internalChecked = checked_1;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TreeviewItem.prototype.getSelection = function () {\r\n        var checkedItems = [];\r\n        var uncheckedItems = [];\r\n        if (isNil(this.internalChildren)) {\r\n            if (this.internalChecked) {\r\n                checkedItems.push(this);\r\n            }\r\n            else {\r\n                uncheckedItems.push(this);\r\n            }\r\n        }\r\n        else {\r\n            var selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\r\n            checkedItems = selection.checked;\r\n            uncheckedItems = selection.unchecked;\r\n        }\r\n        return {\r\n            checkedItems: checkedItems,\r\n            uncheckedItems: uncheckedItems\r\n        };\r\n    };\r\n    TreeviewItem.prototype.correctChecked = function () {\r\n        this.internalChecked = this.getCorrectChecked();\r\n    };\r\n    TreeviewItem.prototype.getCorrectChecked = function () {\r\n        var checked = null;\r\n        if (!isNil(this.internalChildren)) {\r\n            for (var _i = 0, _a = this.internalChildren; _i < _a.length; _i++) {\r\n                var child = _a[_i];\r\n                child.internalChecked = child.getCorrectChecked();\r\n                if (checked === null) {\r\n                    checked = child.internalChecked;\r\n                }\r\n                else if (checked !== child.internalChecked) {\r\n                    checked = undefined;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            checked = this.checked;\r\n        }\r\n        return checked;\r\n    };\r\n    return TreeviewItem;\r\n}());\r\nexport { TreeviewItem };\r\n//# sourceMappingURL=treeview-item.js.map \r\n",null]}