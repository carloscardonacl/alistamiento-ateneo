{"remainingRequest":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\ng2-archwizard\\dist\\directives\\go-to-step.directive.js","dependencies":[{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\ng2-archwizard\\dist\\directives\\go-to-step.directive.js","mtime":1594653272000},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594653262000},{"path":"C:\\wamp64\\www\\sigespro\\front\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1594653256000}],"contextDependencies":[],"result":["/**\n * Created by marc on 09.01.17.\n */\nimport { Directive, EventEmitter, HostListener, Input, Optional, Output } from '@angular/core';\nimport { isStepOffset } from '../util/step-offset.interface';\nimport { isNumber, isString } from 'util';\nimport { WizardStep } from '../util/wizard-step.interface';\nimport { WizardState } from '../navigation/wizard-state.model';\n/**\n * The `goToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [goToStep]=\"absolute step index\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [goToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step\n *\n * ```html\n * <button [goToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nvar GoToStepDirective = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     *\n     * @param wizardState The wizard state\n     * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n     */\n    function GoToStepDirective(wizardState, wizardStep) {\n        this.wizardState = wizardState;\n        this.wizardStep = wizardStep;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         *\n         * @type {EventEmitter}\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         *\n         * @type {EventEmitter}\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    Object.defineProperty(GoToStepDirective.prototype, \"finalize\", {\n        /**\n         * A convenience field for `preFinalize`\n         */\n        get: function () {\n            return this.preFinalize;\n        },\n        /**\n         * A convenience name for `preFinalize`\n         *\n         * @param {EventEmitter<void>} emitter The [[EventEmitter]] to be set\n         */\n        set: function (emitter) {\n            /* istanbul ignore next */\n            this.preFinalize = emitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GoToStepDirective.prototype, \"navigationMode\", {\n        /**\n         * The navigation mode\n         *\n         * @returns {NavigationMode}\n         */\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GoToStepDirective.prototype, \"destinationStep\", {\n        /**\n         * Returns the destination step of this directive as an absolute step index inside the wizard\n         *\n         * @returns {number} The index of the destination step\n         * @throws If `goToStep` is of an unknown type an `Error` is thrown\n         */\n        get: function () {\n            var destinationStep;\n            if (isNumber(this.goToStep)) {\n                destinationStep = this.goToStep;\n            }\n            else if (isString(this.goToStep)) {\n                destinationStep = parseInt(this.goToStep, 10);\n            }\n            else if (isStepOffset(this.goToStep) && this.wizardStep !== null) {\n                destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.goToStep.stepOffset;\n            }\n            else if (this.goToStep instanceof WizardStep) {\n                destinationStep = this.wizardState.getIndexOfStep(this.goToStep);\n            }\n            else {\n                throw new Error(\"Input 'goToStep' is neither a WizardStep, StepOffset, number or string\");\n            }\n            return destinationStep;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    GoToStepDirective.prototype.onClick = function () {\n        this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n    };\n    return GoToStepDirective;\n}());\nexport { GoToStepDirective };\n//# sourceMappingURL=go-to-step.directive.js.map \n",null]}