{"remainingRequest":"C:\\GitHub\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\GitHub\\sigespro\\node_modules\\ng2-archwizard\\dist\\util\\wizard-step.interface.js","dependencies":[{"path":"C:\\GitHub\\sigespro\\node_modules\\ng2-archwizard\\dist\\util\\wizard-step.interface.js","mtime":1582731158836},{"path":"C:\\GitHub\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582731122996},{"path":"C:\\GitHub\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1582731101534}],"contextDependencies":[],"result":["import { WizardStepTitleDirective } from '../directives/wizard-step-title.directive';\nimport { ContentChild, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { isBoolean } from 'util';\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nvar WizardStep = /*@__PURE__*/ (function () {\n    function WizardStep() {\n        /**\n         * A step title property, which contains the visible header title of the step.\n         * This title is then shown inside the navigation bar.\n         * Compared to `stepTitle` this property can contain any html content and not only plain text\n         */\n        /**\n         * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n         * If no navigation symbol is specified, an empty string should be used\n         */\n        this.navigationSymbol = '';\n        /**\n         * A boolean describing if the wizard step has been completed\n         */\n        this.completed = false;\n        /**\n         * A boolean describing if the wizard step is currently selected\n         */\n        this.selected = false;\n        /**\n         * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n         */\n        this.defaultSelected = false;\n        /**\n         * A boolean describing if the wizard step is an optional step\n         */\n        this.optional = false;\n        /**\n         * A function or boolean deciding, if this step can be entered\n         */\n        this.canEnter = true;\n        /**\n         * A function or boolean deciding, if this step can be exited\n         */\n        this.canExit = true;\n        /**\n         * This [[EventEmitter]] is called when the step is entered.\n         * The bound method should be used to do initialization work.\n         */\n        this.stepEnter = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called when the step is exited.\n         * The bound method can be used to do cleanup work.\n         */\n        this.stepExit = new EventEmitter();\n    }\n    Object.defineProperty(WizardStep.prototype, \"hidden\", {\n        /**\n         * Returns if this wizard step should be visible to the user.\n         * If the step should be visible to the user false is returned, otherwise true\n         *\n         * @returns {boolean}\n         */\n        get: function () {\n            return !this.selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method returns true, if this wizard step can be transitioned with a given direction.\n     * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n     *\n     * @param condition A condition variable, deciding if the step can be transitioned\n     * @param direction The direction in which this step should be transitioned\n     * @returns {Promise<boolean>} A [[Promise]] containing `true`, if this step can transitioned in the given direction\n     * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n     */\n    WizardStep.canTransitionStep = function (condition, direction) {\n        if (isBoolean(condition)) {\n            return Promise.resolve(condition);\n        }\n        else if (condition instanceof Function) {\n            return Promise.resolve(condition(direction));\n        }\n        else {\n            return Promise.reject(new Error(\"Input value '\" + condition + \"' is neither a boolean nor a function\"));\n        }\n    };\n    /**\n     * A function called when the step is entered\n     *\n     * @param direction The direction in which the step is entered\n     */\n    WizardStep.prototype.enter = function (direction) {\n        this.stepEnter.emit(direction);\n    };\n    /**\n     * A function called when the step is exited\n     *\n     * @param direction The direction in which the step is exited\n     */\n    WizardStep.prototype.exit = function (direction) {\n        this.stepExit.emit(direction);\n    };\n    /**\n     * This method returns true, if this wizard step can be entered from the given direction.\n     * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be entered\n     * @returns {Promise<boolean>} A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n     * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n     */\n    WizardStep.prototype.canEnterStep = function (direction) {\n        return WizardStep.canTransitionStep(this.canEnter, direction);\n    };\n    /**\n     * This method returns true, if this wizard step can be exited into given direction.\n     * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be left\n     * @returns {Promise<boolean>} A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n     * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n     */\n    WizardStep.prototype.canExitStep = function (direction) {\n        return WizardStep.canTransitionStep(this.canExit, direction);\n    };\n    return WizardStep;\n}());\nexport { WizardStep };\n//# sourceMappingURL=wizard-step.interface.js.map \n",null]}