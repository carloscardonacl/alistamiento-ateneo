{"remainingRequest":"C:\\GitHub\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\GitHub\\sigespro\\node_modules\\ngx-treeview\\src\\treeview-event-parser.js","dependencies":[{"path":"C:\\GitHub\\sigespro\\node_modules\\ngx-treeview\\src\\treeview-event-parser.js","mtime":1582731161286},{"path":"C:\\GitHub\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582731122996},{"path":"C:\\GitHub\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1582731101534}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Injectable } from '@angular/core';\nimport { isNil } from 'lodash';\nvar TreeviewEventParser = /*@__PURE__*/ (function () {\n    function TreeviewEventParser() {\n    }\n    return TreeviewEventParser;\n}());\nexport { TreeviewEventParser };\nvar DefaultTreeviewEventParser = /*@__PURE__*/ (function (_super) {\n    __extends(DefaultTreeviewEventParser, _super);\n    function DefaultTreeviewEventParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DefaultTreeviewEventParser.prototype.getSelectedChange = function (component) {\n        var checkedItems = component.selection.checkedItems;\n        if (!isNil(checkedItems)) {\n            return checkedItems.map(function (item) { return item.value; });\n        }\n        return [];\n    };\n    return DefaultTreeviewEventParser;\n}(TreeviewEventParser));\nexport { DefaultTreeviewEventParser };\nvar DownlineTreeviewEventParser = /*@__PURE__*/ (function (_super) {\n    __extends(DownlineTreeviewEventParser, _super);\n    function DownlineTreeviewEventParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DownlineTreeviewEventParser.prototype.getSelectedChange = function (component) {\n        var _this = this;\n        var items = component.items;\n        if (!isNil(items)) {\n            var result_1 = [];\n            items.forEach(function (item) {\n                var links = _this.getLinks(item, null);\n                if (!isNil(links)) {\n                    result_1 = result_1.concat(links);\n                }\n            });\n            return result_1;\n        }\n        return [];\n    };\n    DownlineTreeviewEventParser.prototype.getLinks = function (item, parent) {\n        var _this = this;\n        if (!isNil(item.children)) {\n            var link_1 = {\n                item: item,\n                parent: parent\n            };\n            var result_2 = [];\n            item.children.forEach(function (child) {\n                var links = _this.getLinks(child, link_1);\n                if (!isNil(links)) {\n                    result_2 = result_2.concat(links);\n                }\n            });\n            return result_2;\n        }\n        if (item.checked) {\n            return [{\n                    item: item,\n                    parent: parent\n                }];\n        }\n        return null;\n    };\n    return DownlineTreeviewEventParser;\n}(TreeviewEventParser));\nexport { DownlineTreeviewEventParser };\nvar OrderDownlineTreeviewEventParser = /*@__PURE__*/ (function (_super) {\n    __extends(OrderDownlineTreeviewEventParser, _super);\n    function OrderDownlineTreeviewEventParser() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.currentDownlines = [];\n        _this.parser = new DownlineTreeviewEventParser();\n        return _this;\n    }\n    OrderDownlineTreeviewEventParser.prototype.getSelectedChange = function (component) {\n        var newDownlines = this.parser.getSelectedChange(component);\n        if (this.currentDownlines.length === 0) {\n            this.currentDownlines = newDownlines;\n        }\n        else {\n            var intersectDownlines_1 = [];\n            this.currentDownlines.forEach(function (downline) {\n                var foundIndex = -1;\n                var length = newDownlines.length;\n                for (var i = 0; i < length; i++) {\n                    if (downline.item.value === newDownlines[i].item.value) {\n                        foundIndex = i;\n                        break;\n                    }\n                }\n                if (foundIndex !== -1) {\n                    intersectDownlines_1.push(newDownlines[foundIndex]);\n                    newDownlines.splice(foundIndex, 1);\n                }\n            });\n            this.currentDownlines = intersectDownlines_1.concat(newDownlines);\n        }\n        return this.currentDownlines;\n    };\n    return OrderDownlineTreeviewEventParser;\n}(TreeviewEventParser));\nexport { OrderDownlineTreeviewEventParser };\n//# sourceMappingURL=treeview-event-parser.js.map \n",null]}