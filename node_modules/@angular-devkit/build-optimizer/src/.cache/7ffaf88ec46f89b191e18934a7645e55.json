{"remainingRequest":"C:\\GitHub\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\GitHub\\sigespro\\node_modules\\ng4-auto-complete\\auto.directive.js","dependencies":[{"path":"C:\\GitHub\\sigespro\\node_modules\\ng4-auto-complete\\auto.directive.js","mtime":1582731160269},{"path":"C:\\GitHub\\sigespro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582731122996},{"path":"C:\\GitHub\\sigespro\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1582731101534}],"contextDependencies":[],"result":["import { Directive, ElementRef, Input, Renderer2, EventEmitter, Output, Optional } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { NgControl } from \"@angular/forms\";\nimport { AutoCompleteService } from \"./auto.service\";\nvar AutoCompleteDirective = /*@__PURE__*/ (function () {\n    function AutoCompleteDirective(elemRef, renderer, autoCompleteService, reactiveFormControl) {\n        this.elemRef = elemRef;\n        this.renderer = renderer;\n        this.autoCompleteService = autoCompleteService;\n        this.reactiveFormControl = reactiveFormControl;\n        this.ngModelChange = new EventEmitter(); // for normal model change\n        this.valueChanged = new EventEmitter(); // for normal value change\n        this.listlength = 15;\n        this.dropdownInitiated = false;\n        this.inpRef = elemRef.nativeElement;\n        this.renderer.setAttribute(this.inpRef, \"spellcheck\", \"false\");\n        this.getDataFromService();\n        this.activateEvents();\n    }\n    AutoCompleteDirective.prototype.ngOnInit = function () {\n        this.configureListType();\n        this.configureDirective();\n    };\n    AutoCompleteDirective.prototype.getDataFromService = function () {\n        if (this.autoCompleteService.dataPresent) {\n            this.list = this.autoCompleteService.list;\n            this.wordTrigger = this.autoCompleteService.wordTrigger;\n            this.listlength = this.autoCompleteService.listlength;\n            this.filterName = this.autoCompleteService.filterName;\n            this.noRecordPlaceHolder = this.autoCompleteService.noRecordPlaceHolder;\n        }\n    };\n    Object.defineProperty(AutoCompleteDirective.prototype, \"autoComplete\", {\n        set: function (list) {\n            this.list = list ? (list.length ? list : []) : [];\n            if (this.list.length === 0) {\n                console.log('static list found empty');\n            }\n            if (list != undefined || list != null) {\n                this.autoCompleteService.list = list;\n                this.autoCompleteService.dataPresent = true;\n            }\n            else {\n                this.list = this.autoCompleteService.list;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteDirective.prototype, \"openOnWordLength\", {\n        set: function (word_trigger) {\n            this.wordTrigger = Number(word_trigger);\n            this.autoCompleteService.wordTrigger = this.wordTrigger;\n            if (word_trigger != undefined || word_trigger != null) {\n                this.autoCompleteService.wordTrigger = Number(word_trigger);\n                this.autoCompleteService.dataPresent = true;\n            }\n            else {\n                this.wordTrigger = this.autoCompleteService.wordTrigger;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteDirective.prototype, \"listLengthToShow\", {\n        set: function (listlength) {\n            this.listlength = Number(listlength);\n            if (listlength != undefined || listlength != null) {\n                this.autoCompleteService.listlength = Number(listlength);\n                this.autoCompleteService.dataPresent = true;\n            }\n            else {\n                this.listlength = this.autoCompleteService.listlength;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteDirective.prototype, \"filterIdentity\", {\n        set: function (filterName) {\n            this.filterName = filterName;\n            if (filterName != undefined || filterName != null) {\n                this.autoCompleteService.filterName = filterName;\n                this.autoCompleteService.dataPresent = true;\n            }\n            else {\n                this.filterName = this.autoCompleteService.filterName;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteDirective.prototype, \"noRecordText\", {\n        set: function (defaultText) {\n            this.noRecordPlaceHolder = defaultText;\n            if (defaultText != undefined || defaultText != null) {\n                this.autoCompleteService.noRecordPlaceHolder = defaultText;\n                this.autoCompleteService.dataPresent = true;\n            }\n            else {\n                this.noRecordPlaceHolder = this.autoCompleteService.noRecordPlaceHolder;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AutoCompleteDirective.prototype.configureListType = function () {\n        if (this.list.length && typeof this.list[0] === \"object\") {\n            this.listType = \"object\";\n        }\n        if (this.list.length && typeof this.list[0] === \"string\") {\n            this.listType = \"string\";\n        }\n    };\n    AutoCompleteDirective.prototype.configureDirective = function () {\n        if (!this.inpRef[\"id\"]) {\n            throw \"auto-directive ID Required! Please provide the unique directive id\";\n        }\n        if (this.listType === \"object\" && !this.filterName) {\n            throw \"Object List Found! Please provide filterName to pluck from object\";\n        }\n        if (this.wordTrigger) {\n            this.listShown = [];\n            return;\n        }\n        // initiated coz- after one leter it helps to open\n        this.filterList();\n        this.initDropdown();\n    };\n    AutoCompleteDirective.prototype.filterList = function () {\n        var that = this;\n        var fieldTomatch = new RegExp(that.elemRef.nativeElement[\"value\"], 'ig');\n        var data = [];\n        if (that.listType === \"string\") {\n            data = that.list.filter(function (item) { return (item.toLowerCase()).match(fieldTomatch); });\n        }\n        if (that.listType === \"object\") {\n            data = that.list.filter(function (item) { return (item[that.filterName].toLowerCase()).match(fieldTomatch); });\n        }\n        if (that.listlength) {\n            that.listShown = data.slice(0, this.listlength);\n        }\n        else {\n            that.listShown = that.list; //all\n        }\n        return that.listShown;\n    };\n    AutoCompleteDirective.prototype.autoCompleteSelect = function (event, ui) {\n        var that = this;\n        var dataFromList = that.searchfromList(ui);\n        var id = \"#\" + event.target.id;\n        //for ngmodule\n        if (dataFromList) {\n            that.ngModelChange.emit(ui.item.value);\n            that.valueChanged.emit(ui.item.value);\n        }\n        else {\n            that.ngModelChange.emit(\"\");\n            that.valueChanged.emit(\"\");\n            setTimeout(function () {\n                $(id).val(\"\");\n            }, 0);\n        }\n        // for Rectiveforms model\n        if (that.reactiveFormControl) {\n            if (dataFromList) {\n                that.reactiveFormControl.control.setValue(ui.item.value);\n            }\n            else {\n                that.reactiveFormControl.control.setValue(\"\");\n            }\n        }\n    };\n    AutoCompleteDirective.prototype.autoCompleteChange = function (event, ui) {\n        var that = this;\n        var dataFromList = that.searchfromList(ui);\n        var id = \"#\" + event.target.id;\n        //for ngmodule\n        if (dataFromList) {\n            that.ngModelChange.emit(that.elemRef.nativeElement[\"value\"]);\n            that.valueChanged.emit(that.elemRef.nativeElement[\"value\"]);\n        }\n        else {\n            that.ngModelChange.emit(\"\");\n            that.valueChanged.emit(\"\");\n            setTimeout(function () {\n                $(id).val(\"\");\n            }, 0);\n        }\n        // for Rectiveforms model\n        if (that.reactiveFormControl) {\n            if (dataFromList) {\n                that.reactiveFormControl.control.setValue(that.elemRef.nativeElement[\"value\"]);\n            }\n            else {\n                that.reactiveFormControl.control.setValue(\"\");\n            }\n        }\n    };\n    AutoCompleteDirective.prototype.initDropdown = function (list, updatedListId) {\n        var _this = this;\n        if (list === void 0) {\n            list = undefined;\n        }\n        if (updatedListId === void 0) {\n            updatedListId = null;\n        }\n        var id = updatedListId || \"#\" + this.inpRef[\"id\"];\n        if (this.noRecordPlaceHolder &&\n            list === undefined &&\n            this.listShown.length === 1 &&\n            this.listShown[0] === this.noRecordPlaceHolder) {\n            var that = this;\n            $(id).autocomplete({\n                // disabled: true,\n                source: function (request, response) {\n                    var matcher = new RegExp(that.noRecordPlaceHolder, \"i\");\n                    response(that.listShown, function (val) {\n                        console.log(val);\n                    });\n                }\n            });\n        }\n        else {\n            if (this.listType === \"object\") {\n                var listData = [];\n                this.listShown.forEach(function (item) {\n                    listData.push(item[_this.filterName]);\n                });\n                $(id).autocomplete({\n                    source: list != undefined ? list : listData,\n                    change: function (event, ui) {\n                        _this.autoCompleteChange(event, ui);\n                    },\n                    select: function (event, ui) {\n                        _this.autoCompleteSelect(event, ui);\n                    }\n                });\n            }\n            else {\n                $(id).autocomplete({\n                    source: list != undefined ? list : this.listShown,\n                    change: function (event, ui) {\n                        _this.autoCompleteChange(event, ui);\n                    },\n                    select: function (event, ui) {\n                        _this.autoCompleteSelect(event, ui);\n                    }\n                });\n            }\n        }\n    };\n    AutoCompleteDirective.prototype.searchfromList = function (ui) {\n        var that = this;\n        var toFind = (ui && ui.item) ? ui.item.value : that.elemRef.nativeElement[\"value\"];\n        if (that.listType === \"string\") {\n            var data = that.list.find(function (item) { return toFind === item; });\n            return data;\n        }\n        if (that.listType === \"object\") {\n            var data = that.list.find(function (item) { return toFind === item[that.filterName]; });\n            return data;\n        }\n    };\n    AutoCompleteDirective.prototype.activateEvents = function () {\n        var _this = this;\n        var that = this;\n        // var id = `#${that.inpRef[\"id\"]}`;\n        // $(\"#city\")\n        //     .on(\"autocompleteselect\", function (event: any, ui: any) {\n        //         //for ngmodule                \n        //         if (that.searchfromList(ui)) {\n        //             that.ngModelChange.emit(ui.item.value);\n        //             that.valueChanged.emit(ui.item.value);\n        //         } else {\n        //             that.ngModelChange.emit(\"\");\n        //             that.valueChanged.emit(\"\");\n        //         }\n        //         // for Rectiveforms model\n        //         if (that.reactiveFormControl) {\n        //             if (that.searchfromList(ui)) {\n        //                 that.reactiveFormControl.control.setValue(ui.item.value);\n        //             } else {\n        //                 that.reactiveFormControl.control.setValue(\"\");\n        //             }\n        //         }\n        //     });\n        // $(\"#city\")\n        //     .on(\"autocompletechange\", function (event: any, ui: any) {\n        //         //for ngmodule\n        //         if (that.searchfromList(ui)) {\n        //             that.ngModelChange.emit(that.elemRef.nativeElement[\"value\"]);\n        //             that.valueChanged.emit(that.elemRef.nativeElement[\"value\"]);\n        //         } else {\n        //             that.ngModelChange.emit(\"\");\n        //             that.valueChanged.emit(\"\");\n        //         }\n        //         // for Rectiveforms model\n        //         if (that.reactiveFormControl) {\n        //             if (that.searchfromList(ui)) {\n        //                 that.reactiveFormControl.control.setValue(that.elemRef.nativeElement[\"value\"]);\n        //             } else {\n        //                 that.reactiveFormControl.control.setValue(\"\");\n        //             }\n        //         }\n        //     });\n        Observable.fromEvent(this.elemRef.nativeElement, 'keyup')\n            .subscribe(function (e) {\n            _this.removeOldList();\n            if (that.inpRef[\"value\"].length <= (that.wordTrigger - 1)) {\n                that.initDropdown([]);\n                return;\n            }\n            that.filterList();\n            if (that.noRecordPlaceHolder && !that.listShown.length) {\n                _this.listShown = [that.noRecordPlaceHolder];\n                that.initDropdown();\n                return;\n            }\n            that.initDropdown();\n        });\n        this.autoCompleteService.settingDynamicList\n            .subscribe(function (bool) {\n            if (bool) {\n                _this.list = _this.autoCompleteService.list;\n                _this.restartDirective();\n            }\n        });\n        this.autoCompleteService.updatingList\n            .subscribe(function (bool) {\n            if (bool) {\n                var updatedList = _this.autoCompleteService.updatedList;\n                var updatedListId = _this.autoCompleteService.updatedListId;\n                _this.initDropdown(updatedList, updatedListId);\n            }\n        });\n    };\n    AutoCompleteDirective.prototype.restartDirective = function () {\n        this.configureListType();\n        this.configureDirective();\n    };\n    AutoCompleteDirective.prototype.removeOldList = function () {\n        this.initDropdown([]);\n    };\n    return AutoCompleteDirective;\n}());\nexport { AutoCompleteDirective };\n//# sourceMappingURL=auto.directive.js.map \n",null]}